{
  "version": 3,
  "sources": ["../src/initDefaultHttp.ts", "../src/config.ts", "../../rad-common/src/config_defaults.ts", "../../rad-common/src/utils/log.ts", "../../rad-common/src/utils/numberFormater.ts", "../src/utils/msal.ts", "../src/utils/initOracleDatabaseConnection.ts", "../src/utils/streamQuery.ts", "../src/utils/getDatabaseConnection.ts", "../src/utils/getSqlWhereString.ts", "../src/utils/standardProjectQuery.ts", "../src/utils/getSqlAccess.ts", "../src/utils/protectedRoute.ts", "../src/utils/generateApi.ts", "../src/utils/generateProjectCUDSql.ts", "../src/utils/standardProjectUpdate.ts", "../src/utils/basicDataHandler.ts", "../src/utils/generateRoleObject.ts", "../src/utils/readApiConfig.ts", "../src/default_api_config/aiWebRestApi.ts", "../src/default_api_config/aiWebRoleApi.ts", "../src/default_api_config/aiWebUserApi.ts", "../src/default_api_config/aiWebUserRoleApi.ts", "../src/utils/getDefaultConfig.ts", "../src/index.ts"],
  "sourcesContent": ["import path from \"path\";\nimport express from \"express\";\nimport helmet from \"helmet\";\nimport session from \"express-session\";\nimport compression from \"compression\";\nimport * as zlib from \"zlib\";\nimport * as redis from \"redis\";\nimport * as StoreConnector from \"connect-redis\";\nimport {\n    WEB_ROOT,\n    SERVER_PORT,\n    SESSION_PRIVATE_KEY,\n    SESSION_NAME,\n    SESSION_DOMAIN,\n    SESSION_MAX_AGE,\n    IS_DEVELOPMENT,\n    PORT_WEB,\n    PORT_API,\n    SESSION_HTTP_ONLY,\n    SESSION_SAME_SITE,\n    SERVER_HOST,\n    SERVER_COMPRESSION,\n    SESSION_SECURE,\n    REDIS_URL,\n    CONSOLE_INFO\n} from \"./config\";\nimport { log, logError, logLine, logStartup } from \"@rad-common\";\nimport { MsalClient } from \"./utils/msal\";\n\n/**\n * main application-server express application\n */\nexport const app = express();\n\n/**\n * init basic modules we need to serve side with session/compression\n */\nexport async function initHttpConfig() {\n    /**\n     * Protect your app from some well-known web vulnerabilities by setting HTTP headers appropriately.\n     */\n    if (!IS_DEVELOPMENT) {\n        app.use(helmet());\n    }\n\n    /**\n     * use redis for session managment, so we can have many instances running\n     */\n    const RedisStore = StoreConnector.default(session);\n    logStartup(\"REDIS SERVER:\", REDIS_URL);\n    const redisClient = redis.createClient({\n        legacyMode: true, // todo, need to check why better\n        url: REDIS_URL\n    });\n    const store = new RedisStore({ client: redisClient });\n    logStartup(\"REDIS SERVER: About to connect to redis\");\n\n    //\n    try {\n        await redisClient.connect();\n    } catch (err) {\n        logError(\"REDIS SERVER: unable to connect to redis server on startup, is it started, is url correct ?\");\n        logError(\"REDIS SERVER ERROR:\\n\", err);\n        process.exit(1);\n    }\n    logStartup(\"REDIS SERVER: connect done\");\n\n    // now we register standard error handler, TODO: need better error handling than this,,,\n    redisClient.on(\"error\", (err) => logError(\"Redis Client Error\", err));\n\n    // allow large updates\n    app.use(express.json({ limit: \"500mb\" }));\n\n    /**\n     * session\n     */\n    app.set(\"trust proxy\", 1); // trust first proxy ?\n    app.use(\n        session({\n            store: store,\n            name: SESSION_NAME,\n            secret: SESSION_PRIVATE_KEY,\n            resave: false,\n            saveUninitialized: true,\n            cookie: {\n                path: \"/\",\n                httpOnly: SESSION_HTTP_ONLY,\n                signed: true,\n                sameSite: SESSION_SAME_SITE,\n                maxAge: SESSION_MAX_AGE,\n                domain: SESSION_DOMAIN,\n                secure: SESSION_SECURE // only used for production/https\n            }\n        })\n    );\n\n    /**\n     * Compression\n     */\n    if (SERVER_COMPRESSION) {\n        app.use(\n            compression({\n                threshold: 1,\n                flush: zlib.constants.Z_SYNC_FLUSH\n            })\n        );\n    }\n\n    /**\n     * body parser\n     * so we can receive json\n     */\n    app.use(express.json());\n\n    /**\n     * static resources from application build\n     */\n    app.use(\"/\", express.static(WEB_ROOT));\n\n    /**\n     * set cache plugin for each session\n     */\n    app.use(function (req, res, next) {\n        (res as any).__msalClient = new MsalClient(req);\n        next();\n    });\n\n    app.get(\"/login\", (req, res) => {\n        log(CONSOLE_INFO, \"Called /login\");\n        ((res as any).__msalClient as MsalClient).login(res);\n    });\n\n    app.get(\"/redirect\", async (req: any, res) => {\n        log(CONSOLE_INFO, \"Called /redirect\");\n        ((res as any).__msalClient as MsalClient).redirect(req, res);\n    });\n}\n\nexport function startHttpServer() {\n    if (IS_DEVELOPMENT) {\n        // when in delvelopment we are only a rest api server, so need to use PORT_API\n        app.listen(PORT_API, SERVER_HOST);\n        logLine(true);\n        logStartup(` ---> Vitejs on http://localhost:${PORT_WEB}`);\n        logStartup(` ---> application-server using port: ${PORT_API} for API (vitejs proxy use this)`);\n        logStartup(` ---> Running in mode: ${IS_DEVELOPMENT ? \"Development\" : \"Production\"}`);\n        logLine(true);\n    } else {\n        app.listen(SERVER_PORT, SERVER_HOST);\n        logLine(true);\n        logStartup(` ---> Running on http://localhost:${SERVER_PORT}`);\n        logStartup(` ---> Serving pages from ${path.join(__dirname, \"../\", \"application\")}`);\n        logStartup(` ---> Running in mode: ${IS_DEVELOPMENT ? \"Development\" : \"Production\"}`);\n        logLine(true);\n    }\n}\n", "/**\n * IMPORTANT\n * User config_defaults.ts at root if you need to edit anything\n * You only need to edit this file if you rename these folders src, dist, application-server, application\n */\n\nimport * as path from \"path\";\nimport {\n    toNumber,\n    toArray,\n    toBool,\n    toString,\n    DEFAULT_PORT_API,\n    DEFAULT_PORT_WEB,\n    DEFAULT_SERVER_API_ROOT,\n    DEFAULT_SERVER_COMPRESSION,\n    DEFAULT_SERVER_HOST,\n    DEFAULT_SERVER_PORT,\n    DEFAULT_SESSION_DOMAIN,\n    DEFAULT_SESSION_HTTP_ONLY,\n    DEFAULT_SESSION_MAX_AGE,\n    DEFAULT_SESSION_NAME,\n    DEFAULT_SESSION_PRIVATE_KEY,\n    DEFAULT_SESSION_SAME_SITE,\n    DEFAULT_DB_FETCH_SIZE,\n    DEFAULT_DB_POOL_MAX,\n    DEFAULT_DB_POOL_MIN,\n    DEFAULT_DB_POOL_PING_INTERVAL,\n    DEFAULT_DB_POOL_TIMEOUT,\n    DEFAULT_DB_PREFETCH_SIZE,\n    DEFAULT_CONSOLE_INFO,\n    DEFAULT_CONSOLE_SELECT,\n    DEFAULT_DB_CONNECTION_ACTION,\n    DEFAULT_DB_CONNECTION_CLIENT_ID,\n    DEFAULT_DB_CONNECTION_CLIENT_INFO,\n    DEFAULT_DB_CONNECTION_DB_OP,\n    DEFAULT_DB_CONNECTION_MODULE,\n    DEFAULT_ACTIVATE_AZURE_FAKE_SUCCESS,\n    DEFAULT_AZURE_CLIENT_ID,\n    DEFAULT_AZURE_FAKE_ROLES,\n    DEFAULT_AZURE_SCOPES,\n    DEFAULT_AZURE_SECRET,\n    DEFAULT_AZURE_TENDANT_URI,\n    DEFAULT_REDIS_URL,\n    DEFAULT_DB_USERNAME,\n    DEFAULT_DB_PASSWORD,\n    DEFAULT_DB_CONNECTION_STRING\n} from \"@rad-common\";\n\ndeclare const DEVELOPMENT: boolean;\nlet devMode: boolean;\ntry {\n    devMode = DEVELOPMENT;\n} catch (err) {\n    devMode = globalThis.DEVELOPMENT;\n}\n\n// if you change this you also need to edit config for vitejs\nexport const WEB_ROOT: string = path.join(__dirname, \"../../application\", \"dist\");\nexport const IS_DEVELOPMENT: boolean = devMode; // esbuild gives us this one\n\n/**\n *  Rest will be environment variables\n *  add \".env\" to application-server folder to use in develpment, will not be used for production\n **/\n\nconst ENV = process.env;\n// http server, server port is only used when in production\nexport const SERVER_PORT = toNumber(ENV.SERVER_PORT, DEFAULT_SERVER_PORT);\nexport const SERVER_HOST = toString(ENV.SERVER_HOST, DEFAULT_SERVER_HOST);\nexport const SERVER_COMPRESSION = toBool(ENV.SERVER_COMPRESSION, DEFAULT_SERVER_COMPRESSION);\nexport const SERVER_API_ROOT = toString(ENV.SERVER_API_ROOT, DEFAULT_SERVER_API_ROOT);\n\n// for express session\nexport const SESSION_MAX_AGE = toNumber(ENV.SESSION_MAX_AGE, DEFAULT_SESSION_MAX_AGE);\nexport const SESSION_DOMAIN = toString(ENV.SESSION_DOMAIN, DEFAULT_SESSION_DOMAIN);\nexport const SESSION_PRIVATE_KEY = toString(ENV.SESSION_PRIVATE_KEY, DEFAULT_SESSION_PRIVATE_KEY);\nexport const SESSION_NAME = toString(ENV.SESSION_NAME, DEFAULT_SESSION_NAME);\nexport const SESSION_HTTP_ONLY = toBool(ENV.SESSION_HTTP_ONLY, DEFAULT_SESSION_HTTP_ONLY);\nexport const SESSION_SAME_SITE = toBool(ENV.SESSION_SAME_SITE, DEFAULT_SESSION_SAME_SITE);\nexport const SESSION_SECURE = toBool(ENV.SESSION_SECURE, !IS_DEVELOPMENT);\n\n// redis\nexport const REDIS_URL = toString(ENV.REDIS_URL, DEFAULT_REDIS_URL);\n\n// azure\nexport const AZURE_CLIENT_ID: string = toString(ENV.AZURE_CLIENT_ID, DEFAULT_AZURE_CLIENT_ID);\nexport const AZURE_TENDANT_URI: string = toString(ENV.AZURE_TENDANT_URI, DEFAULT_AZURE_TENDANT_URI);\nexport const AZURE_SECRET: string = toString(ENV.AZURE_SECRET, DEFAULT_AZURE_SECRET);\nexport const AZURE_SCOPES: string[] = toArray(ENV.AZURE_SCOPES, DEFAULT_AZURE_SCOPES);\nexport const ACTIVATE_AZURE_FAKE_SUCCESS: boolean = toBool(ENV.ACTIVATE_AZURE_FAKE_SUCCESS, DEFAULT_ACTIVATE_AZURE_FAKE_SUCCESS);\nexport const AZURE_FAKE_ROLES: string[] = toArray(ENV.AZURE_FAKE_ROLES, DEFAULT_AZURE_FAKE_ROLES);\n\n// for develpment only\nexport const PORT_API = toNumber(ENV.PORT_API, DEFAULT_PORT_API);\nexport const PORT_WEB = toNumber(ENV.PORT_WEB, DEFAULT_PORT_WEB);\n\n// nodejs_report_react env\nexport const CONSOLE_INFO = toBool(ENV.CONSOLE_INFO, DEFAULT_CONSOLE_INFO);\nexport const CONSOLE_SELECT = toBool(ENV.CONSOLE_SELECT, DEFAULT_CONSOLE_SELECT);\nexport const DB_FETCH_SIZE = toNumber(ENV.DB_FETCH_SIZE, DEFAULT_DB_FETCH_SIZE);\nexport const DB_PREFETCH_SIZE = toNumber(ENV.DB_PREFETCH_SIZE, DEFAULT_DB_PREFETCH_SIZE);\nexport const DB_POOL_MAX = toNumber(ENV.DB_POOL_MAX, DEFAULT_DB_POOL_MAX);\nexport const DB_POOL_MIN = toNumber(ENV.DB_POOL_MIN, DEFAULT_DB_POOL_MIN);\nexport const DB_POOL_PING_INTERVAL = toNumber(ENV.DB_POOL_PING_INTERVAL, DEFAULT_DB_POOL_PING_INTERVAL);\nexport const DB_POOL_TIMEOUT = toNumber(ENV.DB_POOL_TIMEOUT, DEFAULT_DB_POOL_TIMEOUT);\nexport const DB_USERNAME = toString(ENV.DB_USERNAME_ARRAY, DEFAULT_DB_USERNAME);\nexport const DB_CONNECTION_STRING = toString(ENV.DB_CONNECTION_STRING, DEFAULT_DB_CONNECTION_STRING);\nexport const DB_PASSWORD = toString(ENV.DB_PASSWORD, DEFAULT_DB_PASSWORD);\nexport const DB_CONNECTION_CLIENT_ID = toString(ENV.DB_CONNECTION_CLIENT_ID, DEFAULT_DB_CONNECTION_CLIENT_ID);\nexport const DB_CONNECTION_CLIENT_INFO = toString(ENV.DB_CONNECTION_CLIENT_INFO, DEFAULT_DB_CONNECTION_CLIENT_INFO);\nexport const DB_CONNECTION_MODULE = toString(ENV.DB_CONNECTION_MODULE, DEFAULT_DB_CONNECTION_MODULE);\nexport const DB_CONNECTION_DB_OP = toString(ENV.DB_CONNECTION_DB_OP, DEFAULT_DB_CONNECTION_DB_OP);\nexport const DB_CONNECTION_ACTION = toString(ENV.DB_CONNECTION_ACTION, DEFAULT_DB_CONNECTION_ACTION);\n", "/**\n * This is the default settings,you should overide some of these with .env file\n * Important to override SESSION_PRIVATE_KEY\n * Never add passwords to this file\n */\n\n// web nodejs server\nexport const DEFAULT_SERVER_PORT: number = 1080;\nexport const DEFAULT_SERVER_HOST: string = \"localhost\";\nexport const DEFAULT_SERVER_COMPRESSION: boolean = true;\nexport const DEFAULT_SERVER_API_ROOT: string = \"/api\";\n\n// for express session\nexport const DEFAULT_SESSION_MAX_AGE: number = 3600 * 60 * 60 * 24 * 14; //1 sec * 60sec * 60min * 24hours * 14 days\nexport const DEFAULT_SESSION_DOMAIN: string = DEFAULT_SERVER_HOST;\nexport const DEFAULT_SESSION_PRIVATE_KEY: string = \"change_me\";\nexport const DEFAULT_SESSION_NAME: string = \"session_name\";\nexport const DEFAULT_SESSION_HTTP_ONLY: boolean = true;\nexport const DEFAULT_SESSION_SAME_SITE: boolean = true;\n\n// for develpment only\nexport const DEFAULT_PORT_API: number = 1081;\nexport const DEFAULT_PORT_WEB: number = 1080;\n\n// for this project application-server\nexport const DEFAULT_CONSOLE_INFO: boolean = false;\nexport const DEFAULT_CONSOLE_SELECT: boolean = false;\nexport const DEFAULT_DB_FETCH_SIZE: number = 150;\nexport const DEFAULT_DB_PREFETCH_SIZE: number = 150;\nexport const DEFAULT_DB_POOL_MAX: number = 5;\nexport const DEFAULT_DB_POOL_MIN: number = 2;\nexport const DEFAULT_DB_POOL_PING_INTERVAL: number = 60;\nexport const DEFAULT_DB_POOL_TIMEOUT: number = 120;\n\n// connection info sent to database\nexport const DEFAULT_DB_CONNECTION_CLIENT_ID: string = \"PUBLIC-USER\"; // if login is added we will use username here\nexport const DEFAULT_DB_CONNECTION_CLIENT_INFO: string = \"WWW.SAMPLE.COM\";\nexport const DEFAULT_DB_CONNECTION_MODULE: string = \"WWW.SAMPLE.COM\"; // use host name?\nexport const DEFAULT_DB_CONNECTION_DB_OP: string = \"WEB-REPORTS\";\nexport const DEFAULT_DB_CONNECTION_ACTION: string = \"NA - NOT IN USE -> SENDING REPORT NAME\";\n\nexport const DEFAULT_DB_USERNAME: string = \"TESTDB\";\nexport const DEFAULT_DB_PASSWORD: string = \"TESTDB\";\nexport const DEFAULT_DB_CONNECTION_STRING: string =\n    \"(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1522))(CONNECT_DATA=(SERVICE_NAME=xe)))\";\n\n// redis\nexport const DEFAULT_REDIS_URL: string = \"redis://localhost:6379\";\n\n// azure\nexport const DEFAULT_AZURE_CLIENT_ID: string = \"UNKNOW ID\";\nexport const DEFAULT_AZURE_TENDANT_URI: string = \"WWW.SAMPLE.COM\";\nexport const DEFAULT_AZURE_SECRET: string = \"SUPER SECRET\";\nexport const DEFAULT_AZURE_SCOPES: string[] = [\"READ_ONLY\"];\nexport const DEFAULT_ACTIVATE_AZURE_FAKE_SUCCESS: boolean = false;\nexport const DEFAULT_AZURE_FAKE_ROLES: string[] = [];\n\n/********************************************************************\n * Next part is just helpers for env variables so we get correct type from strings\n *\n */\n\n/**\n * Helper for returning number or 0\n */\nexport function toNumber(x: string | null | undefined, defaultValue: number): number {\n    const number = parseInt(x as any);\n    if (isNaN(number)) {\n        return defaultValue;\n    } else {\n        return number;\n    }\n}\n\n/**\n * Helper for returning number or 0\n */\nexport function toBool(x: string | null | undefined, defaultValue: boolean): boolean {\n    if (typeof x !== \"string\") {\n        return defaultValue;\n    }\n    if (x.trim() === \"\") {\n        return defaultValue;\n    }\n    if (x.toLowerCase() === \"true\") {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Helper for returning array, splitter is comma\n */\nexport function toArray(x: string | null | undefined, defaultValue: string[]): string[] {\n    if (typeof x !== \"string\") {\n        return defaultValue;\n    }\n    if (x.trim() === \"\") {\n        return defaultValue;\n    }\n    return x.split(\",\");\n}\n\n/**\n * Helper for returning string\n */\nexport function toString(x: string | null | undefined, defaultValue: string): string {\n    if (typeof x !== \"string\") {\n        return defaultValue;\n    }\n    if (x.trim() === \"\") {\n        return defaultValue;\n    }\n    return x;\n}\n", "export function log(print: boolean, ...msg: any) {\n    if (print) {\n        console.log(\"   Info: \", ...msg);\n    }\n}\n\nexport function logStartup(...msg: any) {\n    console.log(\"   Start: \", ...msg);\n}\n\nexport function logError(...msg: any) {\n    console.log(\"   Error: \", ...msg);\n}\n\nexport function logLine(show: boolean) {\n    if (show) console.log(\"--------------------------------------------------------------\");\n}\n", "export interface NumberFormaterType {\n    toNumber(value: any): number | null | undefined;\n    fromNumber(value: any): string | null | undefined;\n}\n\n/**\n * Number formater to deal with comma, almost same grid uses\n */\nexport class NumberFormater {\n    /**\n     * Takes value and return string\n     * @param value\n     */\n    static toNumber(value: any): number | null | undefined {\n        let returnValue: any = value;\n\n        if (returnValue === null || returnValue === \"undefined\") {\n            returnValue;\n        }\n\n        if (returnValue.includes && returnValue.includes(\",\") && !returnValue.includes(\".\")) {\n            returnValue = returnValue.replace(\",\", \".\");\n        }\n\n        if (isNaN(parseFloat(returnValue))) {\n            return 0;\n        }\n\n        if (returnValue === \"0\") {\n            return 0;\n        }\n\n        return parseFloat(returnValue);\n    }\n\n    /**\n     *\n     * @param value Takes string and returns date\n     */\n    static fromNumber(value: any): string | null | undefined {\n        let returnValue = value;\n\n        if (isNaN(parseFloat(returnValue))) {\n            returnValue = \"\";\n        }\n\n        if (returnValue === null || returnValue === undefined) {\n            return returnValue;\n        }\n\n        if (returnValue.toString().includes(\".\")) {\n            returnValue = returnValue.toString().replace(\".\", \",\");\n        }\n\n        return returnValue.toString();\n    }\n}\n", "import { ConfidentialClientApplication, LogLevel } from \"@azure/msal-node\";\nimport {\n    AZURE_CLIENT_ID,\n    AZURE_SCOPES,\n    AZURE_SECRET,\n    AZURE_TENDANT_URI,\n    IS_DEVELOPMENT,\n    SERVER_HOST,\n    SERVER_PORT,\n    CONSOLE_INFO\n} from \"../config\";\nimport { log, logError } from \"@rad-common\";\n\n// Create msal application object\nconst azureConfig = {\n    auth: {\n        clientId: AZURE_CLIENT_ID,\n        authority: AZURE_TENDANT_URI,\n        clientSecret: AZURE_SECRET\n    },\n    system: {\n        loggerOptions: {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            loggerCallback(loglevel: any, message: any, _containsPii: any) {\n                log(CONSOLE_INFO, loglevel, message);\n            },\n            piiLoggingEnabled: false,\n            logLevel: LogLevel.Error\n        }\n    }\n};\n\n// SESSION INFO\nexport type sessionUserType = {\n    name: string;\n    id: string;\n    roles: string[];\n    account: any;\n};\n\nexport class MsalClient {\n    cca: ConfidentialClientApplication;\n    sessionid: any;\n\n    constructor(req: any) {\n        this.cca = new ConfidentialClientApplication(azureConfig);\n        // if we already have it, then set cache\n        if (req.session?.azureContext) {\n            (this.cca as any).tokenCache.deserialize(req.session.azureContext);\n        }\n    }\n\n    async updateToken(req, tokenRequest: { code: string; scopes: string[]; redirectUri: string }) {\n        try {\n            const response = await this.cca.acquireTokenByCode(tokenRequest);\n\n            // add to session, so we know to later\n\n            req.session.user = {\n                sessionid: this.sessionid,\n                name: (response.idTokenClaims as any).name,\n                id: (response.idTokenClaims as any).preferred_username,\n                roles: (response.idTokenClaims as any).roles,\n                account: response.account\n            };\n            req.session.azureContext = (this.cca as any).tokenCache.serialize();\n            log(CONSOLE_INFO, \"redirect resonse account name:\", response.account.name);\n            log(CONSOLE_INFO, \"redirect resonse account expires on:\", response.expiresOn);\n\n            return true;\n        } catch (error) {\n            log(CONSOLE_INFO, \"AZURE LOGIN\", error);\n            req.session.user = null;\n            return false;\n        }\n    }\n\n    login(res) {\n        const authCodeUrlParameters = {\n            scopes: AZURE_SCOPES,\n            redirectUri: IS_DEVELOPMENT ? `http://localhost:${SERVER_PORT}/redirect` : `https://${SERVER_HOST}/redirect`\n        };\n\n        // get url to sign user in and consent to scopes needed for application\n        this.cca\n            .getAuthCodeUrl(authCodeUrlParameters)\n            .then((response) => {\n                res.redirect(response);\n            })\n            .catch((error) => logError(JSON.stringify(error)));\n    }\n\n    async redirect(req: any, res: any) {\n        const tokenRequest = {\n            code: req.query.code,\n            scopes: AZURE_SCOPES,\n            redirectUri: IS_DEVELOPMENT ? `http://localhost:${SERVER_PORT}/redirect` : `https://${SERVER_HOST}/redirect`\n        };\n\n        const result = await this.updateToken(req, tokenRequest);\n\n        if (result) {\n            res.redirect(\n                IS_DEVELOPMENT ? `http://localhost:${SERVER_PORT}/#redirected` : `https://${SERVER_HOST}/#redirected`\n            );\n        } else {\n            res.redirect(\n                IS_DEVELOPMENT ? `http://localhost:${SERVER_PORT}/#loginError` : `https://${SERVER_HOST}/#loginError`\n            );\n        }\n    }\n\n    async acquireTokenSilent(req, forceRefresh: boolean) {\n        const result = await this.cca.acquireTokenSilent({\n            account: req.session.user.account,\n            scopes: [\"user.read\"],\n            forceRefresh: forceRefresh\n        });\n\n        log(CONSOLE_INFO, \"silent name:\", result.account.name);\n        log(CONSOLE_INFO, \"silent expires:\", result.expiresOn);\n        log(CONSOLE_INFO, \"silent now:\", new Date().toISOString());\n        log(CONSOLE_INFO, \"from cache\", result.fromCache);\n        if (!result.fromCache) {\n            log(CONSOLE_INFO, \"Account updated\", result.account);\n        }\n\n        req.session.user = {\n            name: (result.account.idTokenClaims as any).name,\n            id: (result.account.idTokenClaims as any).preferred_username,\n            roles: (result.account.idTokenClaims as any).roles?.map((e) => e.toUpperCase()),\n            account: result.account\n        };\n\n        return result;\n    }\n}\n", "import { logError, logLine, logStartup } from \"@rad-common\";\nimport {\n    DB_USERNAME,\n    DB_PASSWORD,\n    DB_CONNECTION_STRING,\n    DB_POOL_MAX,\n    DB_POOL_MIN,\n    DB_POOL_PING_INTERVAL,\n    DB_POOL_TIMEOUT\n} from \"../config\";\nimport OracleDB from \"oracledb\";\nimport { DB_FETCH_SIZE, DB_PREFETCH_SIZE } from \"../config\";\n\n// Oracle constans we need to set\nOracleDB.outFormat = OracleDB.OUT_FORMAT_ARRAY; // use less memory server side and client side by using the array, espesially client side\nOracleDB.fetchArraySize = DB_FETCH_SIZE; // keep low to keep server memory load low\nOracleDB.prefetchRows = DB_PREFETCH_SIZE; // keep low to keep server memory load low\n\n// do not fetch date as string, will only create issues when we loose timestamp/zone\nOracleDB.fetchAsString = [OracleDB.NUMBER]; // stringfy will break these anyway, and number will be wrong if we dont do this\nOracleDB.extendedMetaData = true;\n\n// this will hold our pool connections\nexport let pool: OracleDB.Pool;\nexport async function initOracleDatabaseConnection() {\n    logLine(true);\n    logStartup(\"ORACLEDB: Creating connection pool\");\n    try {\n        pool = await OracleDB.createPool({\n            user: DB_USERNAME,\n            password: DB_PASSWORD,\n            connectString: DB_CONNECTION_STRING,\n            poolMax: DB_POOL_MAX,\n            poolMin: DB_POOL_MIN,\n            poolTimeout: DB_POOL_TIMEOUT,\n            poolPingInterval: DB_POOL_PING_INTERVAL\n        });\n        logStartup(`ORACLEDB: Connection pool created`);\n    } catch (e) {\n        logError(`ORACLEDB: User:`, DB_USERNAME);\n        logError(`ORACLEDB: PassFirstLetter:`, DB_PASSWORD[0]);\n        logError(`ORACLEDB: ConnectionString:`, DB_CONNECTION_STRING);\n    }\n    logLine(true);\n}\n", "import OracleDB from \"oracledb\";\nimport { DB_FETCH_SIZE, CONSOLE_INFO } from \"../config\";\nimport { log } from \"@rad-common\";\nimport { getDatabaseConnection } from \"./getDatabaseConnection\";\n\n/**\n * stream helper to get data out of oracle\n * when not using clean array or json first data is timestamp, next is metadata\n * @param sqlString select * from something etc\n * @param sqlBindings use [] if nothing\n * @param userID is sendt to oracle db as clientID for seesion data\n * @param tableNameOrReportName sent as action to oracle db session data\n * @param usejson retuns pure json TODO > change to type -> JSON, ARRAY, META\n * @param sendData callback to forward data to\n * @param cleanArray retuns only json\n * @returns promise\n */\nexport async function streamQuery(\n    sqlString: string,\n    sqlBindings: any[],\n    userID: string,\n    tableNameOrReportName: string,\n    usejson: boolean | null,\n    sendData: (data: string | any[], done: boolean) => void,\n    cleanArray = false\n): Promise<{ success: boolean; msg?: any }> {\n    return new Promise(async (resolve, reject) => {\n        let connection: OracleDB.Connection;\n        let stream: any;\n        let buffer: any[] = usejson || cleanArray ? [] : [new Date()]; // use date for smart refresh\n        let closed = false;\n        let error = false;\n        const skipMeta = usejson || cleanArray;\n        try {\n            log(CONSOLE_INFO, `Streaming, getConnection`);\n            connection = await getDatabaseConnection(userID);\n            log(CONSOLE_INFO, `Streaming, getConnection OK`);\n        } catch (err) {\n            log(CONSOLE_INFO, `Streaming, getConnection FAILED:`, err);\n            reject({ success: false, msg: err });\n            return;\n        }\n\n        try {\n            log(CONSOLE_INFO, `Streaming, calling queryStream`);\n            stream = connection.queryStream(sqlString, sqlBindings, {\n                outFormat: usejson && !cleanArray ? OracleDB.OUT_FORMAT_OBJECT : OracleDB.OUT_FORMAT_ARRAY\n            });\n            log(CONSOLE_INFO, `Streaming, queryStream ok`);\n        } catch (err) {\n            reject({ success: false, msg: err });\n        }\n\n        function closeConnection() {\n            if (!closed) {\n                closed = true;\n                process.nextTick(async () => {\n                    await connection.close();\n                });\n            }\n        }\n\n        stream?.on(\"close\", function () {\n            log(CONSOLE_INFO, `Streaming, close event, buffer lenght:${buffer.length}`);\n            if (!error) {\n                if (cleanArray) {\n                    sendData(buffer, true);\n                } else {\n                    sendData(JSON.stringify(buffer), true);\n                }\n            }\n            buffer = [];\n            closeConnection();\n            resolve({ success: true });\n        });\n\n        stream?.on(\"end\", function () {\n            log(CONSOLE_INFO, `Streaming, end event`);\n            stream.destroy();\n        });\n\n        stream?.on(\"error\", function (err: any) {\n            error = true;\n            log(CONSOLE_INFO, `Streaming, error event`, err);\n            reject({ success: false, msg: err });\n        });\n\n        stream?.on(\"data\", function (data: any) {\n            buffer.push(data);\n\n            if (buffer.length > DB_FETCH_SIZE) {\n                if (cleanArray) {\n                    sendData(buffer, false);\n                } else {\n                    sendData(JSON.stringify(buffer), false);\n                }\n                buffer = [];\n            }\n        });\n\n        stream?.on(\"metadata\", function (metadata: any) {\n            log(CONSOLE_INFO, `Streaming, metadata event`);\n            if (!skipMeta) {\n                buffer.push(metadata);\n            }\n        });\n    });\n}\n", "import {\n    DB_CONNECTION_CLIENT_ID,\n    DB_CONNECTION_CLIENT_INFO,\n    DB_CONNECTION_DB_OP,\n    DB_CONNECTION_MODULE\n} from \"../config\";\nimport { pool } from \"./initOracleDatabaseConnection\";\n\nexport async function getDatabaseConnection(clientId: string) {\n    if (pool) {\n        const connection = await pool.getConnection();\n\n        // we add these so DB admin can get info about connected application\n        connection.clientId = clientId || DB_CONNECTION_CLIENT_ID;\n        connection.clientInfo = DB_CONNECTION_CLIENT_INFO;\n        connection.module = DB_CONNECTION_MODULE;\n        //connection.action = TODO: add MODIFICATION or SELECT\n        connection.dbOp = DB_CONNECTION_DB_OP;\n\n        return connection;\n    } else {\n        throw `getDatabaseConnection, pool not ready or unknown`;\n    }\n}\n", "// use data source filter, so we keep it up to date\nimport type { FilterArgument } from \"@simple-html/datasource\";\n// quickfix, I prob should fix numbers on client side.. but Im lazy atm\nimport { NumberFormater } from \"@rad-common\";\n\n/**\n *\n * @param filter Generates sql sting from @simple-html/datasource filter\n * @returns sql string & argument value array\n */\nexport function getSqlWhereString(filter: FilterArgument) {\n    const sqlBindings: string[] = [];\n    let bindCount: number = 0;\n\n    // helper for setting sql binding\n    function getBinding(value: any) {\n        sqlBindings.push(value);\n        bindCount++;\n        return `:${bindCount}`;\n    }\n\n    if (!filter?.filterArguments?.length) {\n        return {\n            sqlString: \"\",\n            sqlBindings: sqlBindings.length ? sqlBindings : null\n        };\n    }\n\n    let isDate = false;\n    let isNumber = false;\n    let isDateTime = false;\n\n    // helper funtion to limit what characters allowed in columns names to prevent sql injection\n    const validateColumnName = function (value: string) {\n        if (!/^[A-Za-z_]+$/.test(value)) {\n            //check value\n            throw \"illiegal characters in column name, only allowed [A-Za-z_]\";\n        } else {\n            return value;\n        }\n    };\n\n    const operatorCheck = function (obj: FilterArgument) {\n        const operator = obj.operator;\n        let value = obj.value;\n        const isAttribute = obj.valueType === \"ATTRIBUTE\";\n\n        if (obj.attributeType === \"date\" && obj.valueType !== \"ATTRIBUTE\") {\n            isDate = true;\n\n            // if null value we dont want to make a sql expression\n            if (typeof value === \"string\" && value.toUpperCase() !== \"NULL\") {\n                const date = new Date(obj.value);\n\n                let day = date.getDate().toString();\n                if (day.length === 1) {\n                    day = \"0\" + day;\n                }\n\n                let month = (date.getMonth() + 1).toString();\n                if (month.length === 1) {\n                    month = \"0\" + month;\n                }\n\n                value = `to_date('${day}.${month}.${date.getFullYear()}', 'DD.MM.YYYY')`;\n            }\n        }\n\n        if (obj.attributeType === \"number\") {\n            isNumber = true;\n        }\n\n        if (obj.attributeType === \"number\" && obj.valueType !== \"ATTRIBUTE\" && value === \"\") {\n            value = 0;\n        }\n\n        // spesial case where I need date query based on time also\n        if (obj.attributeType === (\"dateTime\" as any)) {\n            if (typeof value === \"string\") {\n                value = new Date(value);\n            }\n            isDateTime = true;\n        }\n\n        /**\n         *  next part is just checking operator type, then acting on it\n         *  use if statements if you need tenary inside tenary.\n         *  else it will be hard to understand\n         *  IMPORTANT !!!\n         *  all columns must be inside validateColumnName() and values must be inside getBinding()\n         *  this will stop sql injections\n         */\n\n        /******************************************************************\n         * \"IS_BLANK\"\n         */\n\n        if (operator === \"IS_BLANK\") {\n            // for some reason if someone uses round you actually get 0 and not null values\n            const numberIs0 = ` or ${validateColumnName(obj.attribute as string)} = 0`;\n\n            return `is null${isNumber ? numberIs0 : \"\"}`;\n        }\n\n        /******************************************************************\n         * \"IS_NOT_BLANK\"\n         */\n\n        if (operator === \"IS_NOT_BLANK\") {\n            // for some reason if someone uses round you actually get 0 and not null values\n            const numberNot0 = ` and ${validateColumnName(obj.attribute as string)} != 0`;\n\n            return `is not null${isNumber ? numberNot0 : \"\"}`;\n        }\n\n        /******************************************************************\n         * \"EQUAL\"\n         */\n\n        if (operator === \"EQUAL\") {\n            if (isDate) {\n                if (isAttribute) {\n                    return `= ${validateColumnName(value as string)}`;\n                } else {\n                    return `= ${value}`;\n                }\n            }\n\n            if (isNumber) {\n                if (isAttribute) {\n                    return `= ${validateColumnName(value as string)}`;\n                } else {\n                    if (value !== 0) {\n                        return `= ${getBinding(value)}`;\n                    } else {\n                        // if 0 you usually want blanks..\n                        return `= ${getBinding(value)} or ${validateColumnName(obj.attribute)} is null`;\n                    }\n                }\n            }\n\n            return isAttribute ? `= upper(${validateColumnName(value as string)})` : `= upper(${getBinding(value)})`;\n        }\n\n        /******************************************************************\n         * \"LESS_THAN_OR_EQUAL_TO\"\n         */\n\n        if (operator === \"LESS_THAN_OR_EQUAL_TO\") {\n            if (isDate) {\n                return isAttribute ? `<= ${validateColumnName(value as string)}` : `<= ${value}`;\n            }\n\n            if (isNumber) {\n                return isAttribute ? `<= ${validateColumnName(value as string)}` : `<= ${getBinding(value)}`;\n            }\n\n            return isAttribute ? `<= upper(${validateColumnName(value as string)})` : `<= upper(${getBinding(value)})`;\n        }\n\n        /******************************************************************\n         * \"GREATER_THAN_OR_EQUAL_TO\"\n         */\n\n        if (operator === \"GREATER_THAN_OR_EQUAL_TO\") {\n            if (isDateTime) {\n                // just experiment for getting latest updated\n                return `>= ${getBinding(value)}`;\n            }\n\n            if (isDate) {\n                return isAttribute ? `>= ${validateColumnName(value as string)}` : `>= ${value}`;\n            }\n\n            if (isNumber) {\n                return isAttribute ? `>= ${validateColumnName(value as string)}` : `>= ${getBinding(value)}`;\n            }\n\n            return isAttribute ? `>= upper(${validateColumnName(value as string)})` : `>= upper(${getBinding(value)})`;\n        }\n\n        /******************************************************************\n         * \"LESS_THAN\"\n         */\n        if (operator === \"LESS_THAN\") {\n            if (isDate) {\n                return isAttribute ? `< ${validateColumnName(value as string)}` : `< ${value}`;\n            }\n\n            if (isNumber) {\n                return isAttribute ? `< ${validateColumnName(value as string)}` : `< ${getBinding(value)}`;\n            }\n\n            return isAttribute ? `< upper(${validateColumnName(value as string)})` : `< upper(${getBinding(value)})`;\n        }\n\n        /******************************************************************\n         * \"GREATER_THAN\"\n         */\n        if (operator === \"GREATER_THAN\") {\n            if (isDate) {\n                return isAttribute ? `> ${validateColumnName(value as string)}` : `> ${value}`;\n            }\n\n            if (isNumber) {\n                return isAttribute ? `> ${validateColumnName(value as string)}` : `> ${getBinding(value)}`;\n            }\n\n            return isAttribute ? `> upper(${validateColumnName(value as string)})` : `> upper(${getBinding(value)})`;\n        }\n\n        /******************************************************************\n         * \"CONTAINS\"\n         */\n        if (operator === \"CONTAINS\") {\n            if (isDate) {\n                // if its date we overlook whatever they give us, since it supposed to give us date..\n                return isAttribute ? `>= ${validateColumnName(value as string)}` : `>= ${value}`;\n            }\n\n            return isAttribute\n                ? `like upper('%'||${validateColumnName(value as string)}||'%')`\n                : `like upper(${getBinding(\"%\" + value + \"%\")})`;\n        }\n\n        /******************************************************************\n         * \"NOT_EQUAL_TO\"\n         */\n        if (operator === \"NOT_EQUAL_TO\") {\n            if (isDate) {\n                if (isAttribute) {\n                    return `!= ${validateColumnName(value as string)}  or ${validateColumnName(\n                        obj.attribute as string\n                    )} is null`;\n                }\n\n                // not null, then we also need to return null values\n                return `!= ${value} or ${validateColumnName(obj.attribute as string)} is null`;\n            }\n\n            if (isAttribute) {\n                return `!= upper(${validateColumnName(value as string)})  or ${validateColumnName(\n                    obj.attribute as string\n                )} is null`;\n            }\n\n            // not null, then we also need to return null values\n            return `!= upper(${getBinding(value)}) or ${validateColumnName(obj.attribute as string)} is null`;\n        }\n\n        /******************************************************************\n         * \"DOES_NOT_CONTAIN\"\n         */\n        if (operator === \"DOES_NOT_CONTAIN\") {\n            if (isDate) {\n                // if its date we overlook whatever they give us, since it supposed to give us date..\n                return isAttribute ? `< ${validateColumnName(value as string)}` : `< ${value}`;\n            }\n\n            return isAttribute\n                ? `not like upper('%'||${validateColumnName(value as string)}||'%') or ${validateColumnName(\n                      obj.attribute as string\n                  )} is null`\n                : `not like upper(${getBinding(\"%\" + value + \"%\")}) or ${validateColumnName(\n                      obj.attribute as string\n                  )} is null`;\n        }\n\n        /******************************************************************\n         * \"BEGIN_WITH\"\n         */\n        if (operator === \"BEGIN_WITH\") {\n            if (isDate) {\n                // if its date we overlook whatever they give us, since it supposed to give us date..\n                return isAttribute ? `>= ${validateColumnName(value as string)}` : `>= ${value}`;\n            }\n\n            return isAttribute\n                ? `like upper(${validateColumnName(value as string)}) || '%'`\n                : `like upper(${getBinding(value + \"%\")})`;\n        }\n\n        /******************************************************************\n         * \"END_WITH\"\n         */\n        if (operator === \"END_WITH\") {\n            if (isDate) {\n                // if its date we overlook whatever they give us, since it supposed to give us date..\n                return isAttribute ? `<= ${validateColumnName(value as string)}` : `<= ${value}`;\n            }\n\n            return isAttribute\n                ? `like '%' || upper(${validateColumnName(value as string)})`\n                : `like upper(${getBinding(\"%\" + value)})`;\n        }\n\n        return \"=\";\n    };\n\n    const parser = function (obj: FilterArgument, qs = \"\") {\n        if (obj) {\n            if (!obj.filterArguments || (obj.filterArguments && obj.filterArguments.length === 0)) {\n                const columnName = validateColumnName(obj.attribute as string);\n\n                if (obj.operator !== \"IN\" && obj.operator !== \"NOT_IN\") {\n                    if (obj.attributeType === (\"dateTime\" as any)) {\n                        // spesial case where I use entire date string..\n                        // I only use this for getting modified\n                        qs = qs + `${columnName} ${operatorCheck(obj)}`;\n                    } else {\n                        qs = qs + `upper(${columnName}) ${operatorCheck(obj)}`;\n                    }\n                } else {\n                    let haveNULL = false;\n                    // split newline into array\n\n                    const columnName = validateColumnName(obj.attribute as string);\n                    const operator = obj.operator === \"IN\" ? \"IN\" : \"NOT IN\";\n                    let value;\n\n                    if (Array.isArray(obj.value)) {\n                        value = obj.value.map((val) => {\n                            // this is just to know if we need to add \"is null\" or \"is not null\" at the end\n                            if (!val || val === \"NULL\") {\n                                haveNULL = true;\n                            }\n                            if (obj.attributeType === \"number\") {\n                                return `(1, ${getBinding(NumberFormater.toNumber(val))})`;\n                            }\n                            if (obj.attributeType === \"date\") {\n                                return `(1, to_date(${getBinding(val)}, 'DD.MM.YYYY'))`;\n                            }\n                            return `(1, ${getBinding(val)})`;\n                        });\n                    } else {\n                        value = (obj.value as string).split(\"\\n\").map((val) => {\n                            // this is just to know if we need to add \"is null\" or \"is not null\" at the end\n                            if (!val || val === \"NULL\") {\n                                haveNULL = true;\n                            }\n                            if (obj.attributeType === \"number\") {\n                                return `(1, ${getBinding(NumberFormater.toNumber(val))})`;\n                            }\n                            if (obj.attributeType === \"date\") {\n                                return `(1, to_date(${getBinding(val)}, 'DD.MM.YYYY'))`;\n                            }\n                            return `(1, ${getBinding(val)})`;\n                        });\n                    }\n\n                    qs = qs + `(1, upper(${columnName})) ${operator} (${value})`;\n\n                    if (haveNULL) {\n                        if (obj.operator === \"IN\") {\n                            qs = qs + \" or \" + columnName + \" is null)\";\n                        } else {\n                            qs = qs + \" and \" + columnName + \" is not null)\";\n                        }\n                    } else {\n                        qs = qs + \"\";\n                    }\n                }\n            } else {\n                obj.filterArguments.forEach((y, i) => {\n                    if (i > 0) {\n                        qs = qs + ` ${obj.logicalOperator === \"AND\" ? \"AND\" : \"OR\"} `;\n                    } else {\n                        qs = qs + `(`;\n                    }\n                    qs = parser(y, qs);\n                    if (obj.filterArguments.length - 1 === i) {\n                        qs = qs + `)`;\n                    }\n                });\n            }\n        }\n        return qs;\n    };\n    return {\n        sqlString: parser(filter),\n        sqlBindings: sqlBindings.length > 0 ? sqlBindings : null\n    };\n}\n", "import { streamQuery } from \"../utils/streamQuery\";\r\nimport { Response } from \"express\";\r\nimport { log, logLine } from \"@rad-common\";\r\nimport { getSqlWhereString } from \"../utils/getSqlWhereString\";\r\nimport { CONSOLE_INFO, CONSOLE_SELECT } from \"../config\";\r\n\r\n// we use this to test stream data on client side\r\nexport const STREAM_WRITE_TAG_END = \"!END!\";\r\nexport const STREAM_WRITE_ARRAY_SPLIT = \"!CHSP!\";\r\n\r\nexport async function standardProjectQuery(\r\n    req: any,\r\n    res: Response<any, Record<string, any>>,\r\n    viewName: string,\r\n    queryOverride?: any\r\n) {\r\n    const { meta, rows, count, format } = req.query;\r\n\r\n    log(CONSOLE_INFO, `request meta:`, meta);\r\n    log(CONSOLE_INFO, `request rows:`, rows);\r\n    log(CONSOLE_INFO, `request count:`, count);\r\n    log(CONSOLE_INFO, `request json:`, format);\r\n\r\n    // helper for json format check\r\n    function isJsonFormat(value) {\r\n        if (typeof value === \"string\" && value.toUpperCase() === \"JSON\") {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    // needed to stream data back/gzip\r\n    const usejson = isJsonFormat(format);\r\n\r\n    // todo, add option to not tag data ?\r\n    if (usejson) {\r\n        res.setHeader(\"Content-Type\", \"application/json\");\r\n    } else {\r\n        res.setHeader(\"Content-Type\", \"text/html\");\r\n    }\r\n\r\n    // quick check\r\n    let maxRows = parseInt(rows);\r\n    if (isNaN(maxRows)) {\r\n        maxRows = 0;\r\n    }\r\n\r\n    /**\r\n     * get filter if any and generate sql string\r\n     * depending of project code we wrap or not wrap the sql statement\r\n     */\r\n\r\n    let jsonFilter = queryOverride || req.body;\r\n    let whereSql, sqlBindings;\r\n    if (jsonFilter) {\r\n        if (!jsonFilter?.filterArguments && jsonFilter?.attribute) {\r\n            jsonFilter = { filterArguments: [jsonFilter] };\r\n        }\r\n        const result = getSqlWhereString(jsonFilter);\r\n        whereSql = result.sqlString;\r\n        sqlBindings = result.sqlBindings;\r\n    }\r\n\r\n    let sql = \"\";\r\n    if (viewName) {\r\n        // todo clean up\r\n\r\n        const whereQuery = whereSql ? `where ${whereSql}` : \"\";\r\n        sql = `from ${viewName} ${whereQuery}`;\r\n\r\n        // not very beautiful, but a start\r\n        switch (true) {\r\n            case meta === \"1\":\r\n                sql = `select * ${sql} ${whereSql ? \" and 1 = 0\" : \" where 1 = 0\"}`;\r\n                break;\r\n            case count === \"1\":\r\n                sql = `select count(*) as count ${sql}`;\r\n                break;\r\n            case rows > 0:\r\n                sql = `select * ${sql} fetch first ${maxRows} rows only`;\r\n                break;\r\n            default:\r\n                sql = `select * ${sql}`;\r\n            //do nothing\r\n        }\r\n    } else {\r\n        // in teory api config will never allow this, but someone might use funtion without the dynamic api\r\n        res.statusMessage = \"api config is missing sqlSelect\";\r\n        res.status(504).send();\r\n        res.end();\r\n        return;\r\n    }\r\n\r\n    log(CONSOLE_SELECT, `--------------------------------------------------`);\r\n    log(CONSOLE_SELECT, `standardProjectQuery:`);\r\n    log(CONSOLE_SELECT, `--------------------------------------------------`);\r\n    log(CONSOLE_SELECT, sql.split(\"\\n\").join(\"\\n   Info:  \"));\r\n    logLine(CONSOLE_SELECT);\r\n\r\n    let firstJson = true;\r\n    // reuse report stream utillity class\r\n    await streamQuery(\r\n        sql,\r\n        sqlBindings,\r\n        req.session?.user?.id,\r\n        viewName,\r\n        usejson ? true : false,\r\n        function (data: string, done: boolean) {\r\n            if (usejson) {\r\n                if (firstJson && !done) {\r\n                    data = data.substring(0, data.length - 1);\r\n                    firstJson = false;\r\n                } else {\r\n                    if (firstJson && done) {\r\n                        // do nothing, we need the entire string\r\n                        firstJson = false;\r\n                    } else {\r\n                        if (!done) {\r\n                            data = \",\" + data.substring(1, data.length - 1);\r\n                        } else {\r\n                            data = \",\" + data.substring(1, data.length);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                res.write(data);\r\n            } else {\r\n                res.write(data + STREAM_WRITE_TAG_END + STREAM_WRITE_ARRAY_SPLIT);\r\n            }\r\n        }\r\n    ).catch((e) => {\r\n        res.statusMessage = e.msg?.message || e.msg;\r\n        res.status(504).send();\r\n        res.end();\r\n        return;\r\n    });\r\n    res.end();\r\n}\r\n", "import { streamQuery } from \"../utils/streamQuery\";\r\n\r\ntype roleset = string[];\r\n\r\n// TODO: I might want some expire on this..\r\nconst sqlUserRoles = new Map<string, roleset>();\r\n\r\nexport async function getRoles(username: string) {\r\n    if (sqlUserRoles.has(username)) {\r\n        return sqlUserRoles.get(username) || [];\r\n    } else {\r\n        await updateSqlAccess(username);\r\n        if (sqlUserRoles.has(username)) {\r\n            return sqlUserRoles.get(username) || [];\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n}\r\n\r\nexport async function updateSqlAccess(username: string) {\r\n    const roles = [];\r\n    await streamQuery(\r\n        `select NAME from AI_WEB_USER_ROLE where username = :1`,\r\n        [username],\r\n        username,\r\n        \"AI_WEB_USER_ROLE\",\r\n        true,\r\n        (data) => {\r\n            if (Array.isArray(data)) {\r\n                data.forEach((e) => {\r\n                    if (Array.isArray(e)) {\r\n                        roles.push(e[0]);\r\n                    } else {\r\n                        roles.push(e);\r\n                    }\r\n                });\r\n            }\r\n        },\r\n        true\r\n    );\r\n    sqlUserRoles.set(username, roles);\r\n}\r\n", "/**\n * Simple route protection for now\n * I have no idea how azure works.. need to check out msal.js\n */\n\nimport { ACTIVATE_AZURE_FAKE_SUCCESS, AZURE_FAKE_ROLES, CONSOLE_INFO } from \"../config\";\nimport { log } from \"@rad-common\";\nimport { MsalClient } from \"./msal\";\n\nexport async function protectedRoute(req: any, res: any, next: any) {\n    //todo: remove\n    // TODO: move...\n    // JUST TO FAKE IT\n\n    let error = false;\n\n    if (ACTIVATE_AZURE_FAKE_SUCCESS) {\n        log(CONSOLE_INFO, \"ACTIVATED FAKE USER\", \"ROLES GIVEN:\", AZURE_FAKE_ROLES);\n\n        (req.session as any).user = {\n            name: \"FAKE USER\",\n            id: \"FAKE USER ID\",\n            roles: AZURE_FAKE_ROLES,\n            account: \"BLABLA\"\n        };\n    } else {\n        log(CONSOLE_INFO, \"protectedRoute called userSession:\", req.session?.name);\n    }\n\n    // simple protection for all api, not allowed to call any if not logged in\n    // the diffrent api will handle their own access, or I will add it here..\n    if (!req.session.user) {\n        res.status(401).send({ success: false, message: \"not logged in\", auth: false });\n        error = true;\n    } else {\n        if (!ACTIVATE_AZURE_FAKE_SUCCESS) {\n            try {\n                await ((res as any).__msalClient as MsalClient).acquireTokenSilent(req, false);\n            } catch (x) {\n                res.status(401).send({\n                    success: false,\n                    message: \"not logged in, could not refresh token\",\n                    auth: false\n                });\n                error = true;\n            }\n        }\n        if (!error) {\n            next();\n        }\n    }\n}\n", "import { log, logStartup } from \"@rad-common\";\r\nimport { standardProjectQuery, STREAM_WRITE_ARRAY_SPLIT } from \"./standardProjectQuery\";\r\nimport { ACTIVATE_AZURE_FAKE_SUCCESS, CONSOLE_INFO } from \"../config\";\r\nimport { MsalClient, sessionUserType } from \"src/utils/msal\";\r\nimport { getRoles, updateSqlAccess } from \"./getSqlAccess\";\r\nimport { protectedRoute } from \"./protectedRoute\";\r\nimport express from \"express\";\r\nimport { standardProjectUpdate } from \"./standardProjectUpdate\";\r\nimport { BasicDataHandler } from \"./basicDataHandler\";\r\nimport { generateRoleObject } from \"./generateRoleObject\";\r\nimport { ApiInterface } from \"./apiInterface\";\r\n\r\n/**\r\n * when false we havent initiated the dynamic rest api\r\n */\r\nlet initiatedDefaultApi = false;\r\n\r\n/**\r\n * holds app restapi config, so we can replace them later\r\n */\r\nconst API: Record<string, ApiInterface> = {} as any;\r\n\r\n/**\r\n * creates main reast api methods we need, info, query & update\r\n * TODO: move to own file?\r\n * @param app\r\n */\r\nfunction initiateDefaultConfig(app: express.Application) {\r\n    {\r\n        /**\r\n         * check authentication\r\n         */\r\n        const API_INFO = `/api/auth`;\r\n        logStartup(\"API added:\", API_INFO);\r\n        app.get(API_INFO, protectedRoute, async function (req: any, res, next) {\r\n            const sessionUser = (req.session as any).user as sessionUserType;\r\n            const userName = sessionUser?.name;\r\n            const userID = sessionUser?.id;\r\n            const userAzureRoles = sessionUser?.roles;\r\n            const sqlProjectRoles = await getRoles(userID);\r\n\r\n            res.status(200).send({\r\n                azureRoles: userAzureRoles,\r\n                allUserRoles: userAzureRoles.concat(sqlProjectRoles),\r\n                user: { userName, userID }\r\n            });\r\n            res.end();\r\n            next();\r\n        });\r\n    }\r\n\r\n    {\r\n        /**\r\n         * forceupdate session data from ms\r\n         */\r\n        const API_INFO = `/api/authUpdate`;\r\n        logStartup(\"API added:\", API_INFO);\r\n        app.get(API_INFO, async function (req: any, res, next) {\r\n            if (ACTIVATE_AZURE_FAKE_SUCCESS) {\r\n                res.status(200);\r\n                res.end();\r\n            } else {\r\n                try {\r\n                    await ((res as any).__msalClient as MsalClient).acquireTokenSilent(req, true);\r\n\r\n                    // get sql roles\r\n                    const sessionUser = (req.session as any).user as sessionUserType;\r\n                    const userID = sessionUser?.id;\r\n                    const userName = sessionUser?.name;\r\n                    const userAzureRoles = sessionUser?.roles;\r\n                    await updateSqlAccess(sessionUser?.id);\r\n                    const sqlProjectRoles = await getRoles(userID);\r\n\r\n                    res.status(200).send({\r\n                        azureRoles: userAzureRoles,\r\n                        allUserRoles: userAzureRoles.concat(sqlProjectRoles),\r\n                        user: { userName, userID }\r\n                    });\r\n                    res.end();\r\n                } catch (x) {\r\n                    res.status(401).send({\r\n                        success: false,\r\n                        message: \"not logged in, could not refresh token\",\r\n                        auth: false\r\n                    });\r\n                }\r\n            }\r\n            next();\r\n        });\r\n    }\r\n\r\n    {\r\n        /**\r\n         * Gets info about paths registed\r\n         */\r\n        const API_INFO = `/api/all`;\r\n        logStartup(\"API added:\", API_INFO);\r\n        app.get(API_INFO, protectedRoute, async function (req: any, res, next) {\r\n            log(CONSOLE_INFO, \"calling api:\", API_INFO, req.path);\r\n\r\n            const keyName = Object.keys(API);\r\n            const paths = keyName.map((key) => {\r\n                return {\r\n                    path: key\r\n                };\r\n            });\r\n            const sessionUser = (req.session as any).user as sessionUserType;\r\n            const userName = sessionUser?.name;\r\n            const userID = sessionUser?.id;\r\n            const userAzureRoles = sessionUser?.roles;\r\n            const sqlProjectRoles = await getRoles(userID);\r\n\r\n            res.status(200).send({\r\n                paths,\r\n                azureRoles: userAzureRoles,\r\n                allUserRoles: userAzureRoles.concat(sqlProjectRoles),\r\n                user: { userName, userID }\r\n            });\r\n            res.end();\r\n            next();\r\n        });\r\n    }\r\n\r\n    {\r\n        /**\r\n         * Gets info about the api\r\n         */\r\n        const API_INFO = `/api/info/*`;\r\n        logStartup(\"API added:\", API_INFO);\r\n        app.get(API_INFO, protectedRoute, express.json(), async function (req: any, res, next) {\r\n            log(CONSOLE_INFO, \"calling api:\", API_INFO, req.path);\r\n\r\n            const name = req.path.replace(API_INFO.replace(\"*\", \"\"), \"\");\r\n            const api = API[name];\r\n\r\n            if (!api) {\r\n                const statusMessage = \"unknown API\";\r\n                res.statusMessage = statusMessage;\r\n                res.status(500).send({ msg: statusMessage });\r\n                res.end();\r\n                return;\r\n            }\r\n\r\n            const sessionUser = (req.session as any).user as sessionUserType;\r\n            const userName = sessionUser?.name;\r\n            const userID = sessionUser?.id;\r\n            const sqlProjectRoles = await getRoles(userID);\r\n\r\n            const userroles = generateRoleObject(api, sqlProjectRoles);\r\n\r\n            res.status(200).send({\r\n                api: api,\r\n                apiRoles: userroles,\r\n                allUserRoles: sqlProjectRoles,\r\n                user: { userName, userID }\r\n            });\r\n            res.end();\r\n            next();\r\n        });\r\n    }\r\n\r\n    {\r\n        /**\r\n         * Query api\r\n         */\r\n        const API_QUERY = `/api/query/*`;\r\n        logStartup(\"API added:\", API_QUERY);\r\n        app.post(API_QUERY, protectedRoute, express.json(), async function (req: any, res, next) {\r\n            log(CONSOLE_INFO, \"calling api:\", API_QUERY);\r\n\r\n            const name = req.path.replace(API_QUERY.replace(\"*\", \"\"), \"\");\r\n            const api = API[name];\r\n\r\n            if (!api) {\r\n                const statusMessage = \"unknown API\";\r\n                res.statusMessage = statusMessage;\r\n                res.status(500).send({ msg: statusMessage });\r\n                res.end();\r\n                return;\r\n            }\r\n\r\n            await standardProjectQuery(req, res, name);\r\n            next();\r\n        });\r\n    }\r\n\r\n    {\r\n        /**\r\n         * Update api\r\n         */\r\n        const API_UPDATE = `/api/update/*`;\r\n        logStartup(\"API added:\", API_UPDATE);\r\n        app.post(API_UPDATE, protectedRoute, express.json(), async function (req, res, next) {\r\n            log(CONSOLE_INFO, \"calling api:\", API_UPDATE);\r\n\r\n            const name = req.path.replace(API_UPDATE.replace(\"*\", \"\"), \"\");\r\n            const api = API[name];\r\n\r\n            if (!api) {\r\n                const statusMessage = \"unknown API\";\r\n                res.statusMessage = statusMessage;\r\n                res.status(500).send({ msg: statusMessage });\r\n                res.end();\r\n                return;\r\n            }\r\n\r\n            const sessionUser = (req.session as any).user as sessionUserType;\r\n            const userID = sessionUser?.id;\r\n            const sqlProjectRoles = await getRoles(userID);\r\n\r\n            const userroles = generateRoleObject(api, sqlProjectRoles);\r\n            res.setHeader(\"Content-Type\", \"text/html\"); // this should have been plain -> but I need ot figure out how ngninx override in our AKS\r\n            res.setHeader(\"Cache-Control\", \"no-cache\");\r\n\r\n            await standardProjectUpdate(\r\n                req.body,\r\n                userroles,\r\n                api,\r\n                new BasicDataHandler(res, api, userID),\r\n                (count: number) => {\r\n                    res.write(`${STREAM_WRITE_ARRAY_SPLIT}${count}`);\r\n                }\r\n            );\r\n\r\n            next();\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * generates api\r\n * @param app\r\n * @param api\r\n */\r\nexport function generateApi(app: express.Application, api: ApiInterface) {\r\n    // add to api\r\n    // this is why name also needs to be unique\r\n    // I want to be able to update late, so maybe add version ?\r\n    API[api.viewName] = api;\r\n\r\n    if (!initiatedDefaultApi) {\r\n        initiateDefaultConfig(app);\r\n        initiatedDefaultApi = true;\r\n    }\r\n}\r\n", "enum sqlType {\r\n    delete = \"delete\",\r\n    update = \"update\",\r\n    insert = \"insert\"\r\n}\r\n\r\nexport function generateProjectCUDSql(\r\n    whitelist: string[],\r\n    viewName: string,\r\n    primaryKey: string,\r\n    data: unknown\r\n): [string, sqlType] {\r\n    // get keys in whitelist\r\n    const keys = Object.keys(data).filter((v) => whitelist.indexOf(v) !== -1);\r\n\r\n    // check if primary key is included, else its a insert\r\n    // I have \"x\" prefix on primary, since I will use it in sql code, not allowed to start column with _ $ or #\r\n    const havePrimaryKey = Object.keys(data).includes(\"PRIMARY_KEY_VAR\");\r\n    const isDelete = Object.keys(data).includes(\"__$delete\");\r\n    const isUpdate = Object.keys(data).includes(\"__$update\");\r\n    const isInsert = Object.keys(data).includes(\"__$insert\");\r\n\r\n    let sqlString = \"\";\r\n    let type = null;\r\n    if (keys.length === 0 && !isDelete) {\r\n        sqlString = \"\";\r\n    } else {\r\n        switch (true) {\r\n            /**\r\n             * DELETE\r\n             */\r\n            case isDelete && !isUpdate && !isInsert && havePrimaryKey:\r\n                type = sqlType.delete;\r\n                sqlString = `delete from \\n\\t${viewName} \\nwhere \\n\\t${primaryKey} = :${\"PRIMARY_KEY_VAR\"}`;\r\n                break;\r\n            /**\r\n             * UPDATE\r\n             */\r\n            case isUpdate && !isDelete && !isInsert && havePrimaryKey:\r\n                type = sqlType.update;\r\n                sqlString = `update \\n\\t${viewName} \\nset`;\r\n\r\n                keys.forEach((key, i) => {\r\n                    sqlString = sqlString + `${i > 0 ? \",\" : \"\"}\\n\\t${key} = :${key}`;\r\n                });\r\n\r\n                // if not project then its just primary key\r\n                sqlString = sqlString + `\\nwhere \\n\\t${primaryKey} = :${\"PRIMARY_KEY_VAR\"}\\n`;\r\n\r\n                break;\r\n            /**\r\n             * INSERT\r\n             */\r\n            case isInsert && !isDelete && !isUpdate: // we dont need primary key for insert\r\n                type = sqlType.insert;\r\n\r\n                sqlString = `insert into ${viewName}(\\n\\t${keys.join(\",\\n\\t\")}) \\nvalues(${keys\r\n                    .map((v) => \"\\n\\t:\" + v)\r\n                    .join(\",\")})\\nreturning \\n\\t${primaryKey} into :${\"RETURN_KEY\"}\\n`;\r\n        }\r\n    }\r\n\r\n    // convert iso date string js date, so orcle undestands it\r\n    keys.forEach((key) => {\r\n        // \"2021-04-03T15:40:39.180Z\"\r\n        if (\r\n            // chance of this beeing anything but date is very unlikely..\r\n            typeof data[key] === \"string\" &&\r\n            data[key][10] === \"T\" &&\r\n            data[key][13] === \":\" &&\r\n            data[key][23] === \"Z\" &&\r\n            data[key].length === 24\r\n        ) {\r\n            data[key] = new Date(data[key]);\r\n        }\r\n    });\r\n\r\n    return [sqlString, type];\r\n}\r\n", "import { generateProjectCUDSql } from \"./generateProjectCUDSql\";\r\nimport { BasicDataHandler } from \"./basicDataHandler\";\r\nimport { log, logLine } from \"@rad-common\";\r\nimport { CONSOLE_SELECT } from \"../config\";\r\nimport { orableDB_Constants } from \"./viewAccessInterface\";\r\nimport { ApiInterface } from \"./apiInterface\";\r\nimport { UserRolesInterface } from \"./userRolesInterface\";\r\n\r\n/**\r\n * This takes care of standard update/new and delete\r\n * expect req query to include \"project\"\r\n * @param req\r\n * @param res\r\n * @param dbConnectionName\r\n * @param tableConfig if projectColumnName is null, then it asumes no project column is used\r\n * @returns\r\n */\r\nexport async function standardProjectUpdate(\r\n    data: any,\r\n    roles: UserRolesInterface,\r\n    tableConfig: ApiInterface,\r\n    databaseHandler: BasicDataHandler,\r\n    callback: (count: number) => void\r\n) {\r\n    if (!data) {\r\n        databaseHandler.error(\"missing data\");\r\n        return;\r\n    }\r\n\r\n    // sort so we get delete, update then inserts\r\n    if (Array.isArray(data)) {\r\n        data = data.sort((a, b) => {\r\n            let A = 0;\r\n            let B = 0;\r\n\r\n            switch (true) {\r\n                case a.__$delete === 1:\r\n                    A = 1;\r\n                    break;\r\n                case a.__$update === 1:\r\n                    A = 2;\r\n                    break;\r\n                case a.__$insert === 1:\r\n                    A = 3;\r\n                    break;\r\n            }\r\n\r\n            switch (true) {\r\n                case b.__$delete === 1:\r\n                    B = 1;\r\n                    break;\r\n                case b.__$update === 1:\r\n                    B = 2;\r\n                    break;\r\n                case b.__$insert === 1:\r\n                    B = 3;\r\n                    break;\r\n            }\r\n\r\n            return A - B;\r\n        });\r\n    }\r\n\r\n    // check access\r\n    // TODO\r\n\r\n    if (Array.isArray(data)) {\r\n        for (let i = 0; i < data.length; i++) {\r\n            const row = data[i];\r\n            const isDelete = Object.keys(row).includes(\"__$delete\");\r\n            if (isDelete && roles.DELETE !== true) {\r\n                databaseHandler.error(\"missing delete access\", `access denied, missing delete access`);\r\n                return;\r\n            }\r\n            const isUpdate = Object.keys(row).includes(\"__$update\");\r\n            if (isUpdate && roles.UPDATE !== true) {\r\n                databaseHandler.error(\"missing update access\", `access denied, missing update access`);\r\n                return;\r\n            }\r\n            const isInsert = Object.keys(row).includes(\"__$insert\");\r\n            if (isInsert && roles.INSERT !== true) {\r\n                databaseHandler.error(\"missing insert access\", `access denied, missing insert access`);\r\n                return;\r\n            }\r\n\r\n            // lets make sure its one of these before we continue\r\n            if (!isInsert && !isUpdate && !isDelete) {\r\n                databaseHandler.error(\"not insert/update or delete\", `access denied, not valid code`);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    // now that we have done some error checking we can open database connection\r\n    try {\r\n        await databaseHandler.createDBConnection();\r\n    } catch (err) {\r\n        databaseHandler.rollbackAndCloseDB();\r\n        databaseHandler.error(\"get connection failed\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // if we throw inside this try/catch we cause rollback\r\n\r\n        if (Array.isArray(data)) {\r\n            for (let i = 0; i < data.length; i++) {\r\n                let row = data[i];\r\n\r\n                const [sqlString, type] = generateProjectCUDSql(\r\n                    roles.UPDATABLE_COLUMNS || [], //  TODO: I need to filter out readonly columns before I run this..\r\n                    tableConfig.viewName,\r\n                    tableConfig.primaryKey,\r\n                    row\r\n                );\r\n\r\n                // make sure if found one of these after generating code too\r\n                if (type !== \"insert\" && type !== \"update\" && type !== \"delete\") {\r\n                    throw new Error(\"request is not insert/update or delete, access denied\");\r\n                }\r\n\r\n                // clean up internal row variables, so oracle dont complain\r\n                // object can not contain something we dont use in sql\r\n                //\"__$delete\", \"__$update\", \"__$insert\" <- these gets cleared now\r\n                // this is why we do this after sql generate\r\n\r\n                const dataKeys = Object.keys(row);\r\n                const allowedKeys = roles.UPDATABLE_COLUMNS.filter((e) => {\r\n                    if (dataKeys.includes(e)) {\r\n                        // if it also is in current object we add it\r\n                        return true;\r\n                    }\r\n\r\n                    return false;\r\n                });\r\n\r\n                if (allowedKeys.length === 0) {\r\n                    // if we do not have any of allowed key, then lets kill it right away\r\n                    if (type === \"update\") {\r\n                        // this will cause rollback\r\n                        throw new Error(\"not allowed to update without column data\");\r\n                    }\r\n                }\r\n\r\n                // always allow primary key, needed for delete and update\r\n                allowedKeys.push(\"PRIMARY_KEY_VAR\");\r\n\r\n                // this clean the client data\r\n                const cleanData = {};\r\n                allowedKeys.forEach((att) => {\r\n                    cleanData[att] = row[att];\r\n                });\r\n                row = cleanData;\r\n\r\n                if (type === \"insert\") {\r\n                    // we dont need this for inserts,\r\n                    // user will supply this, or its autogenerated..\r\n                    delete row.PRIMARY_KEY_VAR;\r\n                }\r\n\r\n                function getReturnType(tc: ApiInterface) {\r\n                    if (tc.primaryKeyType === \"number\") {\r\n                        return {\r\n                            type: orableDB_Constants.NUMBER,\r\n                            dir: orableDB_Constants.BIND_OUT\r\n                        };\r\n                    } else {\r\n                        return {\r\n                            type: orableDB_Constants.STRING,\r\n                            dir: orableDB_Constants.BIND_OUT\r\n                        };\r\n                    }\r\n                }\r\n\r\n                if (sqlString) {\r\n                    if (type === \"insert\") {\r\n                        row[\"RETURN_KEY\"] = getReturnType(tableConfig);\r\n                    }\r\n                    // todo: make own for updates\r\n\r\n                    logLine(CONSOLE_SELECT);\r\n                    log(CONSOLE_SELECT, \"Update/insert/delete sql:\");\r\n                    log(CONSOLE_SELECT, \"---------------------------------------\");\r\n                    log(CONSOLE_SELECT, \"SQL:\");\r\n                    log(CONSOLE_SELECT, \"---------------------------------------\");\r\n                    log(CONSOLE_SELECT, \"\\n   Info:  \" + sqlString.split(\"\\n\").join(\"\\n   Info:  \"));\r\n                    log(CONSOLE_SELECT, \"---------------------------------------\");\r\n                    log(CONSOLE_SELECT, \"SQL_BINDINGS:\");\r\n                    log(CONSOLE_SELECT, \"---------------------------------------\");\r\n                    log(CONSOLE_SELECT, row);\r\n                    logLine(CONSOLE_SELECT);\r\n\r\n                    // send to database\r\n                    await databaseHandler.execute(sqlString, row);\r\n                    callback(i);\r\n                }\r\n            }\r\n\r\n            // we are done looping, lest commit our data\r\n            await databaseHandler.commitAndCloseDB();\r\n        }\r\n    } catch (err) {\r\n        // if any errors happend need to roll back\r\n        await databaseHandler.rollbackAndCloseDB();\r\n        databaseHandler.error(\"save failed\", err.message);\r\n        return;\r\n    }\r\n\r\n    databaseHandler.done();\r\n}\r\n", "import OracleDB from \"oracledb\";\r\nimport { Response } from \"express\";\r\nimport { getDatabaseConnection } from \"./getDatabaseConnection\";\r\nimport { log, logError } from \"@rad-common\";\r\nimport { STREAM_WRITE_TAG_END } from \"./standardProjectQuery\";\r\nimport { CONSOLE_INFO } from \"../config\";\r\nimport { ApiInterface } from \"./apiInterface\";\r\n\r\n/**\r\n * Basic database handler to be used with standardProjectUpdate\r\n * if you need something in between you can use this to handle it\r\n */\r\nexport class BasicDataHandler {\r\n    dbConnection: OracleDB.Connection;\r\n    res: Response<any, Record<string, any>>;\r\n    viewApi: ApiInterface;\r\n    newRecordKeys: string[] = [];\r\n    skipConnection = false; // helper to skip all update/connection to update during testing\r\n    clientID: string;\r\n\r\n    constructor(res: Response<any, Record<string, any>>, viewApi: ApiInterface, clientID: string) {\r\n        this.res = res;\r\n        this.viewApi = viewApi;\r\n        this.clientID = clientID;\r\n    }\r\n\r\n    /**\r\n     * ready for connection to be created\r\n     * error handling needs to be handled aoutside\r\n     */\r\n    public async createDBConnection() {\r\n        if (this.skipConnection) {\r\n            log(CONSOLE_INFO, \"skipConnection activated, skipping getDbConnection\");\r\n        } else {\r\n            this.dbConnection = await getDatabaseConnection(this.clientID);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * handles error and closes request\r\n     * @param statusMessage\r\n     * @param clientErrorMsg\r\n     */\r\n    public error(statusMessage: string, clientErrorMsg?: any) {\r\n        logError(statusMessage, clientErrorMsg);\r\n        this.res.statusMessage = statusMessage;\r\n        this.res.write(`${STREAM_WRITE_TAG_END}${JSON.stringify({ msg: clientErrorMsg || statusMessage || \"\" })}`);\r\n        this.res.end();\r\n    }\r\n\r\n    /**\r\n     * this will call database\r\n     * @param sqlString\r\n     * @param databindings\r\n     */\r\n    public async execute(sqlString: string, databindings: any) {\r\n        if (this.skipConnection) {\r\n            log(CONSOLE_INFO, \"skipConnection activated, skipping execute\");\r\n        } else {\r\n            if (this.dbConnection) {\r\n                const x = await this.dbConnection.execute(sqlString, databindings, {\r\n                    resultSet: true\r\n                });\r\n\r\n                if (x?.outBinds) {\r\n                    if ((x as any).outBinds[\"RETURN_KEY\"]) {\r\n                        const binds: string[] | number[] = (x as any).outBinds[\"RETURN_KEY\"];\r\n                        this.newRecordKeys.push(binds as never); // why never ?\r\n                    }\r\n                }\r\n            } else {\r\n                throw new Error(\"execute called without db connection\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * commits and closes db connection\r\n     * important you call close to request after\r\n     */\r\n    public async commitAndCloseDB() {\r\n        if (this.skipConnection) {\r\n            log(CONSOLE_INFO, \"skipConnection activated, skipping commitAndCloseDB\");\r\n        } else {\r\n            if (this.dbConnection) {\r\n                await this.dbConnection.commit();\r\n                await this.dbConnection.close();\r\n            } else {\r\n                throw new Error(\"commitAndCloseDB called without db connection\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * rollbacks and closes db connection\r\n     * important you call close to request after\r\n     */\r\n    public async rollbackAndCloseDB() {\r\n        if (this.skipConnection) {\r\n            log(CONSOLE_INFO, \"skipConnection activated, skipping rollbackAndCloseDB\");\r\n        } else {\r\n            if (this.dbConnection) {\r\n                await this.dbConnection.rollback();\r\n                await this.dbConnection.close();\r\n            } else {\r\n                throw new Error(\"rollbackAndCloseDB called without db connection\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * All ok, send success message back\r\n     */\r\n    public done() {\r\n        this.res.write(`${STREAM_WRITE_TAG_END}${JSON.stringify(this.newRecordKeys.flat())}`);\r\n        this.res.end();\r\n    }\r\n}\r\n", "import { ApiInterface } from \"../utils/apiInterface\";\r\nimport { UserRolesInterface } from \"./userRolesInterface\";\r\n\r\nexport function generateRoleObject(config: ApiInterface, userRoles: string[]): UserRolesInterface {\r\n    function isObject(x: any) {\r\n        return typeof x === \"object\" && !Array.isArray(x) && x !== null;\r\n    }\r\n\r\n    if (!config || !isObject(config) || !userRoles || !Array.isArray(userRoles)) {\r\n        return {\r\n            DELETE: false,\r\n            INSERT: false,\r\n            UPDATE: false,\r\n            UPDATABLE_COLUMNS: []\r\n        };\r\n    }\r\n\r\n    let insertAccess = false;\r\n    config.accessInsert?.forEach((role) => {\r\n        if (!insertAccess && typeof role === \"string\") {\r\n            if (userRoles.includes(role)) {\r\n                insertAccess = true;\r\n            }\r\n        }\r\n    });\r\n\r\n    let deleteAccess = false;\r\n    config.accessDelete?.forEach((role) => {\r\n        if (!deleteAccess && typeof role === \"string\") {\r\n            if (userRoles.includes(role)) {\r\n                deleteAccess = true;\r\n            }\r\n        }\r\n    });\r\n\r\n    const updatableColumns: string[] = [];\r\n\r\n    if (Array.isArray(config.columns)) {\r\n        config.columns.forEach((column) => {\r\n            const updateAccessConfig = config.accessUpdate || [];\r\n            const updateAccessCol = column.accessUpdate || [];\r\n            const updateAccessFull = updateAccessConfig.concat(updateAccessCol);\r\n\r\n            updateAccessFull.filter((role) => {\r\n                if (typeof role === \"string\") {\r\n                    if (userRoles.includes(role)) {\r\n                        updatableColumns.push(column.name);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    return {\r\n        DELETE: deleteAccess,\r\n        INSERT: insertAccess,\r\n        UPDATE: updatableColumns.length > 0,\r\n        UPDATABLE_COLUMNS: updatableColumns\r\n    };\r\n}\r\n", "import { ApiInterface } from \"./apiInterface\";\r\n\r\nexport function readApiConfig(aniConfig: ApiInterface[]) {\r\n    const apis: ApiInterface[] = aniConfig;\r\n    const errors: [{ apiname: string; errors: string[] }] = [] as any;\r\n\r\n    return { apis, errors };\r\n}\r\n", "import { ApiInterface } from \"../utils/apiInterface\";\r\n\r\nexport const aiWebRestApi: ApiInterface = {\r\n    viewName: \"AI_WEB_REST_API\",\r\n    accessUpdate: [\"API_ADMIN\"],\r\n    primaryKey: \"ID\",\r\n    primaryKeyType: \"number\",\r\n    columns: [\r\n        {\r\n            name: \"NAME\"\r\n        },\r\n        {\r\n            name: \"DATA\"\r\n        },\r\n        {\r\n            name: \"ENABLED\"\r\n        }\r\n    ]\r\n};\r\n", "import { ApiInterface } from \"../utils/apiInterface\";\r\n\r\nexport const aiWebRoleApi: ApiInterface = {\r\n    viewName: \"AI_WEB_ROLE\",\r\n    accessUpdate: [\"ACCESS_ADMIN\"],\r\n    primaryKey: \"ID\",\r\n    primaryKeyType: \"number\",\r\n    columns: [\r\n        {\r\n            name: \"NAME\"\r\n        },\r\n        {\r\n            name: \"DESCRIPTION\"\r\n        }\r\n    ]\r\n};\r\n", "import { ApiInterface } from \"../utils/apiInterface\";\r\n\r\nexport const aiWebUserApi: ApiInterface = {\r\n    viewName: \"AI_WEB_USER\",\r\n    accessUpdate: [\"ACCESS_ADMIN\"],\r\n    primaryKey: \"ID\",\r\n    primaryKeyType: \"number\",\r\n    columns: [\r\n        {\r\n            name: \"USERNAME\"\r\n        },\r\n        {\r\n            name: \"FIRSTNAME\"\r\n        },\r\n        {\r\n            name: \"LASTNAME\"\r\n        }\r\n    ]\r\n};\r\n", "import { ApiInterface } from \"../utils/apiInterface\";\r\n\r\nexport const aiWebUserRoleApi: ApiInterface = {\r\n    viewName: \"AI_WEB_USER_ROLE\",\r\n    accessUpdate: [\"ACCESS_ADMIN\"],\r\n    primaryKey: \"ID\",\r\n    primaryKeyType: \"number\",\r\n    columns: [\r\n        {\r\n            name: \"WEB_USER_ID\"\r\n        },\r\n        {\r\n            name: \"WEB_ROLE_ID\"\r\n        }\r\n    ]\r\n};\r\n", "import { aiWebRestApi } from \"../default_api_config/aiWebRestApi\";\r\nimport { aiWebRoleApi } from \"../default_api_config/aiWebRoleApi\";\r\nimport { aiWebUserApi } from \"../default_api_config/aiWebUserApi\";\r\nimport { aiWebUserRoleApi } from \"../default_api_config/aiWebUserRoleApi\";\r\n\r\nexport function getDefaultConfig() {\r\n    return [aiWebRestApi, aiWebRoleApi, aiWebUserApi, aiWebUserRoleApi];\r\n}\r\n", "import { app, initHttpConfig, startHttpServer } from \"./initDefaultHttp\";\nimport { initOracleDatabaseConnection } from \"./utils/initOracleDatabaseConnection\";\nimport { logError, logLine, logStartup } from \"@rad-common\";\nimport { streamQuery } from \"./utils/streamQuery\";\nimport { generateApi } from \"./utils/generateApi\";\nimport { readApiConfig } from \"./utils/readApiConfig\";\nimport { getDefaultConfig } from \"./utils/getDefaultConfig\";\n\nasync function start() {\n    // init database connection\n    await initOracleDatabaseConnection();\n\n    // todo check access layer works, lets just add a fetch here for now\n    try {\n        await streamQuery(\n            `select username from AI_WEB_USER fetch first 1 rows only`,\n            [],\n            \"na\",\n            \"AI_WEB_USER\",\n            true,\n            (data) => {\n                logStartup(\"ORACLE ACCESS DB TEST: \", data);\n            },\n            true\n        );\n    } catch (e) {\n        logError(\"ORACLE ACCESS DB ERROR: default tables need to have be added\");\n        logError(\"ORACLE ACCESS DB ERROR:\", e);\n        // exit\n        process.exit(1);\n    }\n\n    // init http server settings\n    await initHttpConfig();\n\n    // time to start server\n    startHttpServer();\n\n    const { apis, errors } = readApiConfig(getDefaultConfig());\n\n    if (errors.length) {\n        errors.forEach((err) => {\n            logError(err.apiname, \" fails checks, service will be forced to quit, fix error before you try again\");\n            // todo log out all errors\n        });\n        process.exit(1);\n    }\n\n    apis.forEach((api) => {\n        generateApi(app, api);\n        logStartup(\"API added :\", api.viewName);\n    });\n\n    // TODO: read out dynamic API\n\n    logLine(true);\n}\nstart();\n"],
  "mappings": "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",
  "names": []
}
