{
  "version": 3,
  "sources": ["../src/initDefaultHttp.ts", "../src/config.ts", "../../rad-common/src/config_defaults.ts", "../../rad-common/src/utils/log.ts", "../src/utils/msal.ts", "../src/utils/initOracleDatabaseConnection.ts", "../src/index.ts"],
  "sourcesContent": ["import path from \"path\";\nimport express from \"express\";\nimport helmet from \"helmet\";\nimport session from \"express-session\";\nimport compression from \"compression\";\nimport * as zlib from \"zlib\";\nimport * as redis from \"redis\";\nimport * as StoreConnector from \"connect-redis\";\nimport {\n    WEB_ROOT,\n    SERVER_PORT,\n    SESSION_PRIVATE_KEY,\n    SESSION_NAME,\n    SESSION_DOMAIN,\n    SESSION_MAX_AGE,\n    IS_DEVELOPMENT,\n    PORT_WEB,\n    PORT_API,\n    SESSION_HTTP_ONLY,\n    SESSION_SAME_SITE,\n    SERVER_HOST,\n    SERVER_COMPRESSION,\n    SESSION_SECURE,\n    REDIS_URL,\n    CONSOLE_INFO\n} from \"./config\";\nimport { log, logError, logLine, logStartup } from \"@rad-common\";\nimport { MsalClient } from \"./utils/msal\";\n\n/**\n * main application-server express application\n */\nexport const app = express();\n\n/**\n * init basic modules we need to serve side with session/compression\n */\nexport async function initHttpConfig() {\n    /**\n     * Protect your app from some well-known web vulnerabilities by setting HTTP headers appropriately.\n     */\n    if (!IS_DEVELOPMENT) {\n        app.use(helmet());\n    }\n\n    /**\n     * use redis for session managment, so we can have many instances running\n     */\n    const RedisStore = StoreConnector.default(session);\n    logStartup(\"REDIS SERVER:\", REDIS_URL);\n    const redisClient = redis.createClient({\n        legacyMode: true, // todo, need to check why better\n        url: REDIS_URL\n    });\n    const store = new RedisStore({ client: redisClient });\n    logStartup(\"REDIS SERVER: About to connect to redis\");\n\n    //\n    try {\n        await redisClient.connect();\n    } catch (err) {\n        logError(\"REDIS SERVER: unable to connect to redis server on startup, is it started, is url correct ?\");\n        logError(\"REDIS SERVER ERROR:\\n\", err);\n        process.exit(1);\n    }\n    logStartup(\"REDIS SERVER: connect done\");\n\n    // now we register standard error handler, TODO: need better error handling than this,,,\n    redisClient.on(\"error\", (err) => logError(\"Redis Client Error\", err));\n\n    // allow large updates\n    app.use(express.json({ limit: \"500mb\" }));\n\n    /**\n     * session\n     */\n    app.set(\"trust proxy\", 1); // trust first proxy ?\n    app.use(\n        session({\n            store: store,\n            name: SESSION_NAME,\n            secret: SESSION_PRIVATE_KEY,\n            resave: false,\n            saveUninitialized: true,\n            cookie: {\n                path: \"/\",\n                httpOnly: SESSION_HTTP_ONLY,\n                signed: true,\n                sameSite: SESSION_SAME_SITE,\n                maxAge: SESSION_MAX_AGE,\n                domain: SESSION_DOMAIN,\n                secure: SESSION_SECURE // only used for production/https\n            }\n        })\n    );\n\n    /**\n     * Compression\n     */\n    if (SERVER_COMPRESSION) {\n        app.use(\n            compression({\n                threshold: 1,\n                flush: zlib.constants.Z_SYNC_FLUSH\n            })\n        );\n    }\n\n    /**\n     * body parser\n     * so we can receive json\n     */\n    app.use(express.json());\n\n    /**\n     * static resources from application build\n     */\n    app.use(\"/\", express.static(WEB_ROOT));\n\n    /**\n     * set cache plugin for each session\n     */\n    app.use(function (req, res, next) {\n        (res as any).__msalClient = new MsalClient(req);\n        next();\n    });\n\n    app.get(\"/login\", (req, res) => {\n        log(CONSOLE_INFO, \"Called /login\");\n        ((res as any).__msalClient as MsalClient).login(res);\n    });\n\n    app.get(\"/redirect\", async (req: any, res) => {\n        log(CONSOLE_INFO, \"Called /redirect\");\n        ((res as any).__msalClient as MsalClient).redirect(req, res);\n    });\n}\n\nexport function startHttpServer() {\n    if (IS_DEVELOPMENT) {\n        // when in delvelopment we are only a rest api server, so need to use PORT_API\n        app.listen(PORT_API, SERVER_HOST);\n        logLine(true);\n        logStartup(` ---> Vitejs on http://localhost:${PORT_WEB}`);\n        logStartup(` ---> application-server using port: ${PORT_API} for API (vitejs proxy use this)`);\n        logStartup(` ---> Running in mode: ${IS_DEVELOPMENT ? \"Development\" : \"Production\"}`);\n        logLine(true);\n    } else {\n        app.listen(SERVER_PORT, SERVER_HOST);\n        logLine(true);\n        logStartup(` ---> Running on http://localhost:${SERVER_PORT}`);\n        logStartup(` ---> Serving pages from ${path.join(__dirname, \"../\", \"application\")}`);\n        logStartup(` ---> Running in mode: ${IS_DEVELOPMENT ? \"Development\" : \"Production\"}`);\n        logLine(true);\n    }\n}\n", "/**\n * IMPORTANT\n * User config_defaults.ts at root if you need to edit anything\n * You only need to edit this file if you rename these folders src, dist, application-server, application\n */\n\nimport * as path from \"path\";\nimport {\n    toNumber,\n    toArray,\n    toBool,\n    toString,\n    DEFAULT_PORT_API,\n    DEFAULT_PORT_WEB,\n    DEFAULT_SERVER_API_ROOT,\n    DEFAULT_SERVER_COMPRESSION,\n    DEFAULT_SERVER_HOST,\n    DEFAULT_SERVER_PORT,\n    DEFAULT_SESSION_DOMAIN,\n    DEFAULT_SESSION_HTTP_ONLY,\n    DEFAULT_SESSION_MAX_AGE,\n    DEFAULT_SESSION_NAME,\n    DEFAULT_SESSION_PRIVATE_KEY,\n    DEFAULT_SESSION_SAME_SITE,\n    DEFAULT_DB_FETCH_SIZE,\n    DEFAULT_DB_POOL_MAX,\n    DEFAULT_DB_POOL_MIN,\n    DEFAULT_DB_POOL_PING_INTERVAL,\n    DEFAULT_DB_POOL_TIMEOUT,\n    DEFAULT_DB_PREFETCH_SIZE,\n    DEFAULT_CONSOLE_INFO,\n    DEFAULT_CONSOLE_SELECT,\n    DEFAULT_DB_CONNECTION_ACTION,\n    DEFAULT_DB_CONNECTION_CLIENT_ID,\n    DEFAULT_DB_CONNECTION_CLIENT_INFO,\n    DEFAULT_DB_CONNECTION_DB_OP,\n    DEFAULT_DB_CONNECTION_MODULE,\n    DEFAULT_ACTIVATE_AZURE_FAKE_SUCCESS,\n    DEFAULT_AZURE_CLIENT_ID,\n    DEFAULT_AZURE_FAKE_ROLES,\n    DEFAULT_AZURE_SCOPES,\n    DEFAULT_AZURE_SECRET,\n    DEFAULT_AZURE_TENDANT_URI,\n    DEFAULT_REDIS_URL,\n    DEFAULT_DB_USERNAME,\n    DEFAULT_DB_PASSWORD,\n    DEFAULT_DB_CONNECTION_STRING\n} from \"@rad-common\";\n\ndeclare const DEVELOPMENT: boolean;\nlet devMode: boolean;\ntry {\n    devMode = DEVELOPMENT;\n} catch (err) {\n    devMode = globalThis.DEVELOPMENT;\n}\n\n// if you change this you also need to edit config for vitejs\nexport const WEB_ROOT: string = path.join(__dirname, \"../../application\", \"dist\");\nexport const IS_DEVELOPMENT: boolean = devMode; // esbuild gives us this one\n\n/**\n *  Rest will be environment variables\n *  add \".env\" to application-server folder to use in develpment, will not be used for production\n **/\n\nconst ENV = process.env;\n// http server, server port is only used when in production\nexport const SERVER_PORT = toNumber(ENV.SERVER_PORT, DEFAULT_SERVER_PORT);\nexport const SERVER_HOST = toString(ENV.SERVER_HOST, DEFAULT_SERVER_HOST);\nexport const SERVER_COMPRESSION = toBool(ENV.SERVER_COMPRESSION, DEFAULT_SERVER_COMPRESSION);\nexport const SERVER_API_ROOT = toString(ENV.SERVER_API_ROOT, DEFAULT_SERVER_API_ROOT);\n\n// for express session\nexport const SESSION_MAX_AGE = toNumber(ENV.SESSION_MAX_AGE, DEFAULT_SESSION_MAX_AGE);\nexport const SESSION_DOMAIN = toString(ENV.SESSION_DOMAIN, DEFAULT_SESSION_DOMAIN);\nexport const SESSION_PRIVATE_KEY = toString(ENV.SESSION_PRIVATE_KEY, DEFAULT_SESSION_PRIVATE_KEY);\nexport const SESSION_NAME = toString(ENV.SESSION_NAME, DEFAULT_SESSION_NAME);\nexport const SESSION_HTTP_ONLY = toBool(ENV.SESSION_HTTP_ONLY, DEFAULT_SESSION_HTTP_ONLY);\nexport const SESSION_SAME_SITE = toBool(ENV.SESSION_SAME_SITE, DEFAULT_SESSION_SAME_SITE);\nexport const SESSION_SECURE = toBool(ENV.SESSION_SECURE, !IS_DEVELOPMENT);\n\n// redis\nexport const REDIS_URL = toString(ENV.REDIS_URL, DEFAULT_REDIS_URL);\n\n// azure\nexport const AZURE_CLIENT_ID: string = toString(ENV.AZURE_CLIENT_ID, DEFAULT_AZURE_CLIENT_ID);\nexport const AZURE_TENDANT_URI: string = toString(ENV.AZURE_TENDANT_URI, DEFAULT_AZURE_TENDANT_URI);\nexport const AZURE_SECRET: string = toString(ENV.AZURE_SECRET, DEFAULT_AZURE_SECRET);\nexport const AZURE_SCOPES: string[] = toArray(ENV.AZURE_SCOPES, DEFAULT_AZURE_SCOPES);\nexport const ACTIVATE_AZURE_FAKE_SUCCESS: boolean = toBool(ENV.ACTIVATE_AZURE_FAKE_SUCCESS, DEFAULT_ACTIVATE_AZURE_FAKE_SUCCESS);\nexport const AZURE_FAKE_ROLES: string[] = toArray(ENV.AZURE_FAKE_ROLES, DEFAULT_AZURE_FAKE_ROLES);\n\n// for develpment only\nexport const PORT_API = toNumber(ENV.PORT_API, DEFAULT_PORT_API);\nexport const PORT_WEB = toNumber(ENV.PORT_WEB, DEFAULT_PORT_WEB);\n\n// nodejs_report_react env\nexport const CONSOLE_INFO = toBool(ENV.CONSOLE_INFO, DEFAULT_CONSOLE_INFO);\nexport const CONSOLE_SELECT = toBool(ENV.CONSOLE_SELECT, DEFAULT_CONSOLE_SELECT);\nexport const DB_FETCH_SIZE = toNumber(ENV.DB_FETCH_SIZE, DEFAULT_DB_FETCH_SIZE);\nexport const DB_PREFETCH_SIZE = toNumber(ENV.DB_PREFETCH_SIZE, DEFAULT_DB_PREFETCH_SIZE);\nexport const DB_POOL_MAX = toNumber(ENV.DB_POOL_MAX, DEFAULT_DB_POOL_MAX);\nexport const DB_POOL_MIN = toNumber(ENV.DB_POOL_MIN, DEFAULT_DB_POOL_MIN);\nexport const DB_POOL_PING_INTERVAL = toNumber(ENV.DB_POOL_PING_INTERVAL, DEFAULT_DB_POOL_PING_INTERVAL);\nexport const DB_POOL_TIMEOUT = toNumber(ENV.DB_POOL_TIMEOUT, DEFAULT_DB_POOL_TIMEOUT);\nexport const DB_USERNAME = toString(ENV.DB_USERNAME_ARRAY, DEFAULT_DB_USERNAME);\nexport const DB_CONNECTION_STRING = toString(ENV.DB_CONNECTION_STRING, DEFAULT_DB_CONNECTION_STRING);\nexport const DB_PASSWORD = toString(ENV.DB_PASSWORD, DEFAULT_DB_PASSWORD);\nexport const DB_CONNECTION_CLIENT_ID = toString(ENV.DB_CONNECTION_CLIENT_ID, DEFAULT_DB_CONNECTION_CLIENT_ID);\nexport const DB_CONNECTION_CLIENT_INFO = toString(ENV.DB_CONNECTION_CLIENT_INFO, DEFAULT_DB_CONNECTION_CLIENT_INFO);\nexport const DB_CONNECTION_MODULE = toString(ENV.DB_CONNECTION_MODULE, DEFAULT_DB_CONNECTION_MODULE);\nexport const DB_CONNECTION_DB_OP = toString(ENV.DB_CONNECTION_DB_OP, DEFAULT_DB_CONNECTION_DB_OP);\nexport const DB_CONNECTION_ACTION = toString(ENV.DB_CONNECTION_ACTION, DEFAULT_DB_CONNECTION_ACTION);\n", "/**\n * This is the default settings,you should overide some of these with .env file\n * Important to override SESSION_PRIVATE_KEY\n * Never add passwords to this file\n */\n\n// web nodejs server\nexport const DEFAULT_SERVER_PORT: number = 1080;\nexport const DEFAULT_SERVER_HOST: string = \"localhost\";\nexport const DEFAULT_SERVER_COMPRESSION: boolean = true;\nexport const DEFAULT_SERVER_API_ROOT: string = \"/api\";\n\n// for express session\nexport const DEFAULT_SESSION_MAX_AGE: number = 3600 * 60 * 60 * 24 * 14; //1 sec * 60sec * 60min * 24hours * 14 days\nexport const DEFAULT_SESSION_DOMAIN: string = DEFAULT_SERVER_HOST;\nexport const DEFAULT_SESSION_PRIVATE_KEY: string = \"change_me\";\nexport const DEFAULT_SESSION_NAME: string = \"session_name\";\nexport const DEFAULT_SESSION_HTTP_ONLY: boolean = true;\nexport const DEFAULT_SESSION_SAME_SITE: boolean = true;\n\n// for develpment only\nexport const DEFAULT_PORT_API: number = 1081;\nexport const DEFAULT_PORT_WEB: number = 1080;\n\n// for this project application-server\nexport const DEFAULT_CONSOLE_INFO: boolean = false;\nexport const DEFAULT_CONSOLE_SELECT: boolean = false;\nexport const DEFAULT_DB_FETCH_SIZE: number = 150;\nexport const DEFAULT_DB_PREFETCH_SIZE: number = 150;\nexport const DEFAULT_DB_POOL_MAX: number = 5;\nexport const DEFAULT_DB_POOL_MIN: number = 2;\nexport const DEFAULT_DB_POOL_PING_INTERVAL: number = 60;\nexport const DEFAULT_DB_POOL_TIMEOUT: number = 120;\n\n// connection info sent to database\nexport const DEFAULT_DB_CONNECTION_CLIENT_ID: string = \"PUBLIC-USER\"; // if login is added we will use username here\nexport const DEFAULT_DB_CONNECTION_CLIENT_INFO: string = \"WWW.SAMPLE.COM\";\nexport const DEFAULT_DB_CONNECTION_MODULE: string = \"WWW.SAMPLE.COM\"; // use host name?\nexport const DEFAULT_DB_CONNECTION_DB_OP: string = \"WEB-REPORTS\";\nexport const DEFAULT_DB_CONNECTION_ACTION: string = \"NA - NOT IN USE -> SENDING REPORT NAME\";\n\nexport const DEFAULT_DB_USERNAME: string = \"TESTDB\";\nexport const DEFAULT_DB_PASSWORD: string = \"TESTDB\";\nexport const DEFAULT_DB_CONNECTION_STRING: string =\n    \"(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1522))(CONNECT_DATA=(SERVICE_NAME=xe)))\";\n\n// redis\nexport const DEFAULT_REDIS_URL: string = \"redis://localhost:6379\";\n\n// azure\nexport const DEFAULT_AZURE_CLIENT_ID: string = \"UNKNOW ID\";\nexport const DEFAULT_AZURE_TENDANT_URI: string = \"WWW.SAMPLE.COM\";\nexport const DEFAULT_AZURE_SECRET: string = \"SUPER SECRET\";\nexport const DEFAULT_AZURE_SCOPES: string[] = [\"READ_ONLY\"];\nexport const DEFAULT_ACTIVATE_AZURE_FAKE_SUCCESS: boolean = false;\nexport const DEFAULT_AZURE_FAKE_ROLES: string[] = [];\n\n/********************************************************************\n * Next part is just helpers for env variables so we get correct type from strings\n *\n */\n\n/**\n * Helper for returning number or 0\n */\nexport function toNumber(x: string | null | undefined, defaultValue: number): number {\n    const number = parseInt(x as any);\n    if (isNaN(number)) {\n        return defaultValue;\n    } else {\n        return number;\n    }\n}\n\n/**\n * Helper for returning number or 0\n */\nexport function toBool(x: string | null | undefined, defaultValue: boolean): boolean {\n    if (typeof x !== \"string\") {\n        return defaultValue;\n    }\n    if (x.trim() === \"\") {\n        return defaultValue;\n    }\n    if (x.toLowerCase() === \"true\") {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Helper for returning array, splitter is comma\n */\nexport function toArray(x: string | null | undefined, defaultValue: string[]): string[] {\n    if (typeof x !== \"string\") {\n        return defaultValue;\n    }\n    if (x.trim() === \"\") {\n        return defaultValue;\n    }\n    return x.split(\",\");\n}\n\n/**\n * Helper for returning string\n */\nexport function toString(x: string | null | undefined, defaultValue: string): string {\n    if (typeof x !== \"string\") {\n        return defaultValue;\n    }\n    if (x.trim() === \"\") {\n        return defaultValue;\n    }\n    return x;\n}\n", "export function log(print: boolean, ...msg: any) {\n    if (print) {\n        console.log(\"   Info: \", ...msg);\n    }\n}\n\nexport function logStartup(...msg: any) {\n    console.log(\"   Start: \", ...msg);\n}\n\nexport function logError(...msg: any) {\n    console.log(\"   Error: \", ...msg);\n}\n\nexport function logLine(show: boolean) {\n    if (show) console.log(\"--------------------------------------------------------------\");\n}\n", "import { ConfidentialClientApplication, LogLevel } from \"@azure/msal-node\";\nimport {\n    AZURE_CLIENT_ID,\n    AZURE_SCOPES,\n    AZURE_SECRET,\n    AZURE_TENDANT_URI,\n    IS_DEVELOPMENT,\n    SERVER_HOST,\n    SERVER_PORT,\n    CONSOLE_INFO\n} from \"../config\";\nimport { log, logError } from \"@rad-common\";\n\n// Create msal application object\nconst azureConfig = {\n    auth: {\n        clientId: AZURE_CLIENT_ID,\n        authority: AZURE_TENDANT_URI,\n        clientSecret: AZURE_SECRET\n    },\n    system: {\n        loggerOptions: {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            loggerCallback(loglevel: any, message: any, _containsPii: any) {\n                log(CONSOLE_INFO, loglevel, message);\n            },\n            piiLoggingEnabled: false,\n            logLevel: LogLevel.Error\n        }\n    }\n};\n\n// SESSION INFO\nexport type sessionUserType = {\n    name: string;\n    id: string;\n    roles: string[];\n    account: any;\n};\n\nexport class MsalClient {\n    cca: ConfidentialClientApplication;\n    sessionid: any;\n\n    constructor(req: any) {\n        this.cca = new ConfidentialClientApplication(azureConfig);\n        // if we already have it, then set cache\n        if (req.session?.azureContext) {\n            (this.cca as any).tokenCache.deserialize(req.session.azureContext);\n        }\n    }\n\n    async updateToken(req, tokenRequest: { code: string; scopes: string[]; redirectUri: string }) {\n        try {\n            const response = await this.cca.acquireTokenByCode(tokenRequest);\n\n            // add to session, so we know to later\n\n            req.session.user = {\n                sessionid: this.sessionid,\n                name: (response.idTokenClaims as any).name,\n                id: (response.idTokenClaims as any).preferred_username,\n                roles: (response.idTokenClaims as any).roles,\n                account: response.account\n            };\n            req.session.azureContext = (this.cca as any).tokenCache.serialize();\n            log(CONSOLE_INFO, \"redirect resonse account name:\", response.account.name);\n            log(CONSOLE_INFO, \"redirect resonse account expires on:\", response.expiresOn);\n\n            return true;\n        } catch (error) {\n            log(CONSOLE_INFO, \"AZURE LOGIN\", error);\n            req.session.user = null;\n            return false;\n        }\n    }\n\n    login(res) {\n        const authCodeUrlParameters = {\n            scopes: AZURE_SCOPES,\n            redirectUri: IS_DEVELOPMENT ? `http://localhost:${SERVER_PORT}/redirect` : `https://${SERVER_HOST}/redirect`\n        };\n\n        // get url to sign user in and consent to scopes needed for application\n        this.cca\n            .getAuthCodeUrl(authCodeUrlParameters)\n            .then((response) => {\n                res.redirect(response);\n            })\n            .catch((error) => logError(JSON.stringify(error)));\n    }\n\n    async redirect(req: any, res: any) {\n        const tokenRequest = {\n            code: req.query.code,\n            scopes: AZURE_SCOPES,\n            redirectUri: IS_DEVELOPMENT ? `http://localhost:${SERVER_PORT}/redirect` : `https://${SERVER_HOST}/redirect`\n        };\n\n        const result = await this.updateToken(req, tokenRequest);\n\n        if (result) {\n            res.redirect(\n                IS_DEVELOPMENT ? `http://localhost:${SERVER_PORT}/#redirected` : `https://${SERVER_HOST}/#redirected`\n            );\n        } else {\n            res.redirect(\n                IS_DEVELOPMENT ? `http://localhost:${SERVER_PORT}/#loginError` : `https://${SERVER_HOST}/#loginError`\n            );\n        }\n    }\n\n    async acquireTokenSilent(req, forceRefresh: boolean) {\n        const result = await this.cca.acquireTokenSilent({\n            account: req.session.user.account,\n            scopes: [\"user.read\"],\n            forceRefresh: forceRefresh\n        });\n\n        log(CONSOLE_INFO, \"silent name:\", result.account.name);\n        log(CONSOLE_INFO, \"silent expires:\", result.expiresOn);\n        log(CONSOLE_INFO, \"silent now:\", new Date().toISOString());\n        log(CONSOLE_INFO, \"from cache\", result.fromCache);\n        if (!result.fromCache) {\n            log(CONSOLE_INFO, \"Account updated\", result.account);\n        }\n\n        req.session.user = {\n            name: (result.account.idTokenClaims as any).name,\n            id: (result.account.idTokenClaims as any).preferred_username,\n            roles: (result.account.idTokenClaims as any).roles?.map((e) => e.toUpperCase()),\n            account: result.account\n        };\n\n        return result;\n    }\n}\n", "import { logError, logLine, logStartup } from \"@rad-common\";\nimport {\n    DB_USERNAME,\n    DB_PASSWORD,\n    DB_CONNECTION_STRING,\n    DB_POOL_MAX,\n    DB_POOL_MIN,\n    DB_POOL_PING_INTERVAL,\n    DB_POOL_TIMEOUT\n} from \"../config\";\nimport OracleDB from \"oracledb\";\nimport { DB_FETCH_SIZE, DB_PREFETCH_SIZE } from \"../config\";\n\n// Oracle constans we need to set\nOracleDB.outFormat = OracleDB.OUT_FORMAT_ARRAY; // use less memory server side and client side by using the array, espesially client side\nOracleDB.fetchArraySize = DB_FETCH_SIZE; // keep low to keep server memory load low\nOracleDB.prefetchRows = DB_PREFETCH_SIZE; // keep low to keep server memory load low\n\n// do not fetch date as string, will only create issues when we loose timestamp/zone\nOracleDB.fetchAsString = [OracleDB.NUMBER]; // stringfy will break these anyway, and number will be wrong if we dont do this\nOracleDB.extendedMetaData = true;\n\n// this will hold our pool connections\nexport let pool: OracleDB.Pool;\nexport async function initOracleDatabaseConnection() {\n    logLine(true);\n    logStartup(\"ORACLEDB: Creating connection pool\");\n    try {\n        pool = await OracleDB.createPool({\n            user: DB_USERNAME,\n            password: DB_PASSWORD,\n            connectString: DB_CONNECTION_STRING,\n            poolMax: DB_POOL_MAX,\n            poolMin: DB_POOL_MIN,\n            poolTimeout: DB_POOL_TIMEOUT,\n            poolPingInterval: DB_POOL_PING_INTERVAL\n        });\n        logStartup(`ORACLEDB: Connection pool created`);\n    } catch (e) {\n        logError(`ORACLEDB: User:`, DB_USERNAME);\n        logError(`ORACLEDB: PassFirstLetter:`, DB_PASSWORD[0]);\n        logError(`ORACLEDB: ConnectionString:`, DB_CONNECTION_STRING);\n    }\n    logLine(true);\n}\n", "import { initHttpConfig, startHttpServer } from \"./initDefaultHttp\";\nimport { initOracleDatabaseConnection } from \"./utils/initOracleDatabaseConnection\";\nimport { logLine } from \"@rad-common\";\n\n\nasync function start() {\n    // init database connection\n    await initOracleDatabaseConnection();\n\n    // init http server settings\n    await initHttpConfig();\n\n    // time to start server\n    startHttpServer();\n\n    // TODO -> read out config from database\n\n    // TODO init apis\n    logLine(true);\n}\nstart();\n"],
  "mappings": "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",
  "names": []
}
